{"version":3,"sources":["context/env-context.js","Pages/RiskPage/RiskTableRow.js","Pages/RiskPage/RiskTableData.js","context/server-context.js","Pages/RiskPage.js","Pages/HomePage/PerfDashBoard.js","context/robot-context.js","components/Options.js","Pages/HomePage/HomePageCharts/HomePageBarChart.js","Pages/HomePage/DashBoard/TopLevel.js","components/CardWidget.js","Pages/HomePage/DashBoard/PnLPanel.js","components/Charts/PieCharts.js","Pages/HomePage/DashBoard/BalanceDashboard.js","components/Charts/BarCharting.js","Pages/HomePage/DashBoard/ContributionPnl.js","Pages/HomePage.js","Pages/PortfolioPage/NewPortfolioForm.js","Pages/PortfolioPage/Calculations/PositionCalculation.js","Pages/PortfolioPage/Calculations/CashHoldingCalc.js","Pages/Robot/GetRobotPrice.js","Pages/PortfolioPage/PortfolioBuy.js","Pages/PortfolioPage/NewPortCashFlow.js","components/NewBrokerAccount.js","context/portfolio-context.js","Pages/PortfolioPage/SubPages/PortfolioRisk/PortfolioRiskPage.js","Pages/PortfolioPage/SubPages/PortfolioHoldings/Holdings.js","Pages/PortfolioPage/SubPages/PortfolioHoldings/PortfolioHoldingsPage.js","Pages/Robot/Charts/CumulativeReturn.js","Pages/PortfolioPage/SubPages/PortfolioDashboard/PortfolioNav.js","context/date-context.js","Pages/PortfolioPage/SubPages/PortfolioDashboard/PortfolioDashBoardPage.js","Pages/PortfolioPage/SubPages/PortfolioSettings/PortfolioSettingsPage.js","Pages/PortfolioPage/SubPages/PortfolioTransactions/PortfolioTransactions.js","Pages/PortfolioPage/SubPages/PortfolioTransactions/PortfolioTransactionsPage.js","Pages/PortfolioPage/SubPages/PortfolioImport/PortfolioDataImport.js","Pages/PortfolioPage.js","Pages/TradePage/TradeTableRow.js","Pages/TradePage/TradeTableData.js","Pages/TradePage/TradeExecutor.js","Pages/TradePage.js","components/Notifications.js","Pages/Robot/DateSelectorRobotPage.js","components/NavBar.js","Pages/Robot/NewRobotForm.js","Pages/Robot/Calculations/RobotBalanceCalculation.js","Pages/Robot/RobotNav.js","Pages/Robot/Calculations/RobotPricingForm.js","components/CardWidgetMiddle.js","components/Charts/LineCharts.js","Pages/Robot/SubPages/RobotDashboard/RobotCashFlowTable.js","Pages/Robot/SubPages/RobotDashboard/RobotStatistics.js","Pages/Robot/SubPages/RobotDashboard/RobotGeneralInformation.js","Pages/Robot/SubPages/RobotRisk/RobotDrawDown.js","Pages/Robot/SubPages/RobotReturn/RobotReturn.js","Pages/Robot/SubPages/RobotDashboard/RobotDashBoardPage.js","Pages/Robot/SubPages/RobotTransactions/RobotTrades.js","Pages/Robot/SubPages/RobotTransactions/RobotTransactionContext.js","Pages/Robot/SubPages/RobotTransactions/RobotTransactionUpdateModal.js","Pages/Robot/SubPages/RobotTransactions/RobotTransactionTableRow.js","Pages/Robot/SubPages/RobotTransactions/RobotTransactionsTable.js","Pages/Robot/SubPages/RobotTransactions/RobotTradesQuantity.js","Pages/Robot/SubPages/RobotTransactions/RobotTransactionsPage.js","Pages/Robot/SubPages/RobotRisk/RobotRiskPage.js","Pages/Robot/SubPages/RobotReturn/RobotDailyReturns.js","Pages/Robot/SubPages/RobotReturn/RobotMonthlyReturns.js","Pages/Robot/SubPages/RobotReturn/RobotReturnPage.js","Pages/Robot/SubPages/RobotSettings/RobotRiskSettings.js","Pages/Robot/SubPages/RobotSettings/RobotSettings.js","Pages/Robot/SubPages/RobotSettings/RobotSettingsPage.js","Pages/RobotPage.js","Pages/InstrumentPage.js","App.js","reportWebVitals.js","index.js"],"names":["EnvContext","React","createContext","environment","RiskTableRow","props","useState","robot","dailyRisk","setDailyRisk","tradeLimit","setTradeLimit","riskOnTrade","setRiskOnTrade","pLevel","qType","setQType","quantity","setQuantity","sl","setSl","winExp","setWinExp","style","verticalAlign","Form","Control","onChange","event","target","value","type","placeholder","defaultValue","as","Button","onClick","axios","post","server","daily_risk","nbm_trades","risk_per_trade","pyramiding_level","quantity_type","win_exp","then","response","alert","catch","error","console","RiskTableData","env","useContext","riskData","setRiskData","useEffect","fetch","json","data","log","riskDataRow","map","Table","fontSize","ServerContext","RiskPage","Container","className","background","width","height","window","innerHeight","padding","fluid","Row","Col","Card","Title","PerformanceDashboard","perfData","setPerfData","get","perfRespData","record","color","margin","overflowY","overflowX","RobotContext","OptionLoader","rawData","setRawData","url","params","code","HomePageBarChart","chartOptions","options","chart","toolbar","id","colors","xaxis","categories","labels","show","yaxis","formatter","val","toFixed","title","text","dataLabels","enabled","series","name","Body","TopLevel","arr","responseData","setResponseData","reduce","acc","sum","res","push","CardWidget","display","justifyContent","children","PnLPanel","date","Date","toISOString","substr","dtdData","setDtdData","mtdData","setMtdData","ytdData","setYtdData","start_date","PieCharts","Math","round","BalanceDashBoard","chData","setChData","labelData","setLabelData","totalBalance","a","b","item","BarCharting","max","plotOptions","bar","horizontal","tickAmount","fontFamily","fontWeight","cssClass","ContributionPnl","xLabel","HomePage","startDate","textAlign","marginTop","marginBottom","NewPortfolioForm","portfolioName","setPortfolioName","portfolioCode","setPortfolioCode","portType","setPortType","currency","setCurrency","handleClose","hide","submitHandler","preventDefault","port_name","port_type","port_currency","port_code","Modal","onHide","Header","closeButton","onSubmit","Group","Label","required","Footer","variant","PositionCalculation","firstDay","getFullYear","getMonth","setStartDate","endDate","setEndDate","setResponse","portfolio","setPortfolio","treeData","index","TreeItem","nodeId","toString","label","index2","item2","changePortfolio","checked","end_date","size","column","sm","TreeView","aria-label","defaultCollapseIcon","defaultExpandIcon","sx","flexGrow","maxWidth","controlId","Check","CashHoldingCalculation","treeNodes","GetRobotLastPrice","price","setPrice","setDate","getPrice","PortfolioBuy","securityId","setSecurity","securityName","setSecurityName","unit","setUnit","robotPrice","setRobotPrice","robotQuantity","setRobotQuantity","instrumentParams","sec","sec_type","sec_id","readOnly","selectIndex","nativeEvent","selectedIndex","document","getElementById","GetRobotPrice","min","NewPortCashFlow","setValue","setType","amount","NewBrokerAccount","broker","setBroker","accountNumber","setAccountNumber","token","setToken","setEnv","animation","broker_name","account_number","PortfolioContext","PortfolioRiskPage","Holdings","PortfolioHoldingsPage","CumulativeReturnChart","zoom","axisBorder","offsetX","offsetY","axisTicks","borderType","stroke","curve","align","floating","PortfolioNav","chartData","setChartData","CumulativeReturn","DateContext","PortfolioDashBoardPage","PortfolioSettingsPage","PortfolioTransactions","portTransData","setPortTransData","PortfolioTransactionsPage","PortfolioDataImport","file","setFile","array","setArray","importStream","setImportStream","fileReader","FileReader","onload","string","csvHeader","slice","indexOf","split","i","values","object","header","csvFileToArray","result","readAsText","headerKeys","Object","keys","assign","e","files","accept","key","overflow","PortfolioPage","portfolios","portfolioOptions","showNewPortfolio","setShowNewPortfolio","showNewRobotTrade","setNewRobotTrade","showImportModal","setShowImportModal","showNewPortCashFlow","setNewPortCashFlow","showPosCalc","setPosCalc","showCashCalc","setCashCalc","iconShape","to","path","default","CashHoldingCalc","TradeTableRow","broker_id","security","trd_id","TradeTableData","tradeData","setTradeData","tradeDataRow","TradeExecutor","TradePage","Notifications","messages","setMessages","tradeMessages","processMessages","forEach","interval","setInterval","clearInterval","removeMsg","msg","border","store","addNotification","message","insert","container","animationIn","animationOut","onRemoval","DateSelectorRobotPage","Navigation","showNewAccount","setShowNewAccount","Navbar","bg","Brand","href","Nav","Link","NavDropdown","Item","onSelect","FormControl","disabled","Dropdown","envValue","onEnvChange","Toggle","Menu","eventKey","NewRobotForm","robotName","setRobotName","strategy","setStrategy","account","setAccount","instrument","setInstrument","accountParams","robot_name","maxLength","RobotBalanceCalculation","setLoadState","process","RobotNav","robots","robotsData","setRobotsData","robotsOptions","robotChange","RobotPricingForm","setRobot","CardWidgetMiddle","subTitle","LineCharts","metaData","RobotCashFlowTable","cashFlowData","setCashFlowData","Subtitle","paddingLeft","table","filename","sheet","buttonText","RobotStatistics","transactionData","setTransactionData","totalNumberOfTrades","length","totalNumberOfShortTradesList","totalNumberOfLongTradesList","winningLongTrades","losingLongTrades","winningShortTrades","losingShortTrades","winningTradesList","losingTradesList","totalWinner","totalLoser","totalLongWinner","totalShortWinner","totalLongLoser","totalShortLoser","totalPnl","avgLosingTrade","avgWinningTrade","winRatio","lossRatio","RobotGeneralInformation","RobotDrawDown","RobotReturn","RobotDashBoardPage","balanceData","setBalanceData","pnlData","setPnlData","setDateData","robotData","setRobotData","priceData","setPriceData","totalProfit","totalCashFlow","balance_list","pnl_list","date_list","cashFlowList","balanceChartDataSet","opposite","pnl","perReturn","balanceSubtitle","robotGeneralInformation","RobotTrades","RobotTransactionContext","RobotTransactionUpdateModal","saveModalStatus","quantityRef","useRef","statusRef","pnlRef","openPriceRef","closePriceRef","openTimeRef","closeTimeRef","current","status","openPrice","closePrice","openTime","closeTime","open_price","close_price","open_time","close_time","ref","step","RobotTransactionTableRow","saveModalData","side","rowData","parentElement","rowList","innerHTML","RobotTransactionsTable","modalDataParameters","setModalDataParameters","transactionRows","Provider","saveModalDataParameters","RobotTradesQuantiy","RobotTransactionsPage","quantityData","RobotRiskPage","RobotDailyReturns","dailyReturnList","annotations","y","borderColor","textAnchor","undefined","RobotMonthlyReturns","monthlyChartData","setMonthlyChartData","year","RobotReturnPage","RobotRiskSettings","dailyRiskPerc","setDailyRiskPerc","dailyTradeLimit","setDailyTradeLimit","riskPerTrade","setRiskPerTrade","quantityType","setQuantityType","RobotSettings","setStatus","RobotSettingsPage","RobotPage","defaultRobots","showNewRobot","setNewRobot","showRobotBalanceCalc","setRobotBalanceCalc","showRobotPricingCalc","setRobotPricingCalc","icon","rob","InstrumentPage","App","robotEnvData","setRobotEnvData","portfolioData","setPortfolioData","saveStartDate","saveEndDate","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.3c2a86f6.chunk.js","sourcesContent":["import React from \"react\";\n\nconst EnvContext = React.createContext({\n    environment: 'live'\n});\n\nexport default EnvContext;","import {useState} from \"react\";\nimport SliderWidget from \"../../components/SliderWidget\";\nimport Button from \"react-bootstrap/Button\";\nimport axios from \"axios\";\n\n\n// CSS\nimport \"../MainCSS.css\"\nimport Form from \"react-bootstrap/Form\";\n\nconst RiskTableRow = (props) => {\n\n    const [robot, setRobot] = useState(props.robot);\n    const [dailyRisk, setDailyRisk] = useState(props.dailyRisk);\n    const [tradeLimit, setTradeLimit] = useState(props.tradeLimit);\n    const [riskOnTrade, setRiskOnTrade] = useState(props.riskOnTrade);\n    const [pLevel, setPLevel] = useState(props.pLevel);\n    const [qType, setQType] = useState(props.qType);\n    const [quantity, setQuantity] = useState(props.quantity);\n    const [sl, setSl] = useState(props.sl);\n    const [winExp, setWinExp] = useState(props.winExp);\n\n    const UpdateRisk = () => {\n        axios.post(props.server + 'risk/update_robot_risk/', {\n            robot: robot,\n            daily_risk: dailyRisk,\n            nbm_trades: tradeLimit,\n            risk_per_trade: riskOnTrade,\n            pyramiding_level: pLevel,\n            quantity_type: qType,\n            quantity: quantity,\n            sl: sl,\n            win_exp: winExp\n        })\n            .then(response => alert('Risk is updated for ' + robot))\n            .catch((error) => {\n                console.error('Error Message:', error);\n            });\n    };\n\n    const tradeLimitHandler = (event) => {\n        setTradeLimit(event.target.value)\n    };\n\n    const tradeRiskHandler = (event) => {\n        setRiskOnTrade(event.target.value)\n    };\n\n    const dailyRiskHandler = (event) => {\n        setDailyRisk(event.target.value)\n    };\n\n    const quantityTypeHandler = (event) => {\n        setQType(event.target.value)\n    };\n\n    const quantityHandler = (event) => {\n        setQuantity(event.target.value)\n    };\n\n    const slHandler = (event) => {\n        setSl(event.target.value)\n    };\n\n    const winExpHandler = (event) => {\n        setWinExp(event.target.value)\n    };\n\n    return (\n        <tr>\n            <td style={{verticalAlign: \"middle\"}}>{robot}</td>\n            <td style={{verticalAlign: \"middle\"}}>\n                <Form.Control onChange={dailyRiskHandler} type=\"number\" placeholder={dailyRisk}/>\n            </td>\n            <td style={{verticalAlign: \"middle\"}}>\n                <Form.Control onChange={tradeLimitHandler} type=\"number\" placeholder={tradeLimit}/>\n            </td>\n            <td style={{verticalAlign: \"middle\"}}>\n                <Form.Control onChange={tradeRiskHandler} type=\"number\" placeholder={riskOnTrade}/>\n            </td>\n            <td style={{verticalAlign: \"middle\"}}>\n                <Form.Control onChange={quantityTypeHandler} defaultValue={qType} as=\"select\">\n                    <option value={'Stop Based'}>Stop Based</option>\n                    <option value={'Fix'}>Fix</option>\n                </Form.Control>\n            </td>\n            <td style={{verticalAlign: \"middle\"}}>\n                <Form.Control onChange={quantityHandler} type=\"number\" placeholder={quantity}/>\n            </td>\n            <td style={{verticalAlign: \"middle\"}}>\n                <Form.Control onChange={slHandler} type=\"number\" placeholder={sl}/>\n            </td>\n            <td style={{verticalAlign: \"middle\"}}>\n                <Form.Control onChange={winExpHandler} type=\"number\" placeholder={winExp}/>\n            </td>\n            <td style={{verticalAlign: \"middle\"}}><Button onClick={UpdateRisk}>Update</Button></td>\n        </tr>\n    );\n};\n\nexport default RiskTableRow;","import {useContext, useEffect, useState} from \"react\";\nimport EnvContext from \"../../context/env-context\";\nimport RiskTableRow from \"./RiskTableRow\";\n\n// Bootstrap\nimport Table from \"react-bootstrap/Table\";\n\n// CSS\nimport \"../MainCSS.css\"\n\nconst RiskTableData = (props) => {\n\n    const env = useContext(EnvContext)['environment'];\n\n    const [riskData, setRiskData] = useState([])\n\n    // Fetching robot risk data from database\n    useEffect(() => {\n            fetch(props.server + 'risk/get_robot_risk/' + env)\n                .then(response => response.json())\n                .then(data => setRiskData(data))\n                .catch((error) => {\n                    console.error('Error Message:', error);\n                });\n        }, [props]\n    );\n    console.log(riskData)\n    const riskDataRow = riskData.map((data) =>\n        <RiskTableRow key={data['id']}\n                      robot={data['robot']}\n                      dailyRisk={data['daily_risk']}\n                      tradeLimit={data['daily_trade_limit']}\n                      riskOnTrade={data['risk_per_trade']}\n                      pLevel={data['pyramiding_level']}\n                      qType={data['quantity_type']}\n                      quantity={data['quantity']}\n                      sl={data['sl']}\n                      winExp={data['win_exp']}\n                      server={props.server}/>\n    );\n\n    return (\n        <Table>\n            <thead style={{fontSize: 12}}>\n            <tr>\n                <th style={{verticalAlign: \"middle\"}}>Robot</th>\n                <th style={{verticalAlign: \"middle\"}}>Daily Loss Limit %</th>\n                <th style={{verticalAlign: \"middle\"}}>Max Number of Trades (Daily)</th>\n                <th style={{verticalAlign: \"middle\"}}>Risk Exposure %</th>\n                <th style={{verticalAlign: \"middle\"}}>Quantity Type</th>\n                <th style={{verticalAlign: \"middle\"}}>Quantity</th>\n                <th style={{verticalAlign: \"middle\"}}>SL</th>\n                <th style={{verticalAlign: \"middle\"}}>Win Exp %</th>\n                <th></th>\n            </tr>\n            </thead>\n            <tbody>\n            {riskDataRow}\n            </tbody>\n        </Table>\n    );\n};\n\nexport default RiskTableData;","import React from \"react\";\n\nconst ServerContext = React.createContext();\n\nexport default ServerContext;","import {useState, useEffect, useContext} from \"react\";\n\n// Bootstrap\nimport Button from \"react-bootstrap/Button\";\nimport Container from 'react-bootstrap/Container'\nimport Form from \"react-bootstrap/Form\";\nimport Table from 'react-bootstrap/Table'\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Card from 'react-bootstrap/Card';\n\nimport RiskTableData from \"./RiskPage/RiskTableData\";\nimport ServerContext from \"../context/server-context\";\n\n// CSS\nimport \"./MainCSS.css\"\n\nconst RiskPage = () => {\n\n    const server = useContext(ServerContext)['server'];\n\n    return (\n        <Container className={\"border\"} style={{background: '#FBFAFA', width: \"100%\", height: window.innerHeight, padding: '20px'}} fluid>\n            <Row>\n                <Col>\n                    <Container>\n                        <Card className=\"card\">\n                            <Card.Title className=\"card-header-first\"> Robot Risk Parameters</Card.Title>\n                            <RiskTableData server={server}/>\n                        </Card>\n                    </Container>\n\n                </Col>\n            </Row>\n\n        </Container>\n    );\n};\n\nexport default RiskPage;","import Card from 'react-bootstrap/Card';\nimport Table from \"react-bootstrap/Table\";\nimport {useEffect, useState} from \"react\";\nimport axios from \"axios\";\nimport './PerfDashBoard.css'\nimport Row from \"react-bootstrap/Row\";\n\n//CSS\nimport './PerfDashBoard.css'\n\nconst PerformanceDashboard = (props) => {\n\n    // Fetching Robot balance data\n    const [perfData, setPerfData] = useState([]);\n\n    useEffect(() => {\n            axios.get(props.server + 'home/load_robot_stats/' + props.env)\n                .then(response => response['data'])\n                .then(data => setPerfData(data))\n                .catch((error) => {\n                    console.error('Error Message:', error);\n                });\n        }, [props]\n    );\n\n    const perfRespData = perfData.map((record) =>\n    <tr key={record['robot']['id']}>\n        <td className={'table-row'}>{record['robot']['name']}</td>\n        <td className={'table-row'} style={{color: record['balance']<0.0 ? 'red': 'green'}}>{record['balance']}</td>\n        <td className={'table-row'} style={{color: record['dtd_ret']<0.0 ? 'red': 'green'}}>{record['dtd_ret']} %</td>\n        <td className={'table-row'} style={{color: record['mtd_ret']<0.0 ? 'red': 'green'}}>{record['mtd_ret']} %</td>\n        <td className={'table-row'} style={{color: record['ytd_ret']<0.0 ? 'red': 'green'}}>{record['ytd_ret']} %</td>\n    </tr>);\n\n    return (\n        <Row style={{height: '450px', width: '100%', margin: '15px'}}>\n            <Card className=\"card\" style={{margin: '0px'}}>\n                <div style={{height: '500px', overflowY: 'scroll', overflowX: 'hidden'}}>\n                    <Table>\n                        <thead>\n                        <tr>\n                            <th className={'table-header'}>Robot\n                            </th>\n                            <th className={'table-header'}>Balance</th>\n                            <th className={'table-header'}>DTD</th>\n                            <th className={'table-header'}>MTD</th>\n                            <th className={'table-header'}>YTD</th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        {perfRespData}\n                        </tbody>\n                    </Table>\n                </div>\n            </Card>\n        </Row>\n    );\n\n};\n\nexport default PerformanceDashboard;","import React, {useState, useEffect, useContext} from \"react\";\n\nconst RobotContext = React.createContext();\n\nexport default RobotContext;","import {useEffect, useState} from \"react\";\nimport axios from \"axios\";\n\nconst OptionLoader = (props) => {\n\n    const [rawData, setRawData] = useState('');\n\n    useEffect(() => {\n            axios.get(props.url, {params: props.params})\n                .then(response => response['data'].map((record) =>\n                    <option key={record['id']} value={record[props.code]}>{record[props.value]}</option>))\n                .then(data => setRawData(data))\n                .catch((error) => {\n                    console.error('Error Message:', error);\n                });\n        }, [props]\n    );\n\n    return (\n        rawData\n    );\n};\n\nexport default OptionLoader;","import Card from \"react-bootstrap/Card\";\nimport Chart from \"react-apexcharts\";\n\nconst HomePageBarChart = (props) => {\n    const chartOptions = {\n        options: {\n            chart: {\n                type: 'bar',\n                toolbar: false,\n                id: props.id\n            },\n            colors: [function(value){\n                if (value['value'] < 0){\n                    return '#E32227'\n                }else {\n                    return '#007500'\n                }\n            }],\n            xaxis: {\n                categories: [],\n                labels: {show: false}\n            },\n            yaxis: [\n                {\n                    labels: {\n                        formatter: function (val) {\n                            return val.toFixed(0);\n                        }\n                    },\n                    title: {\n            text: 'Profit'\n          }\n                }\n            ],\n            dataLabels: {\n                enabled: false\n            },\n        },\n        series: [\n            {\n                name: \"series-1\",\n                data: props.data,\n            }\n        ]\n    };\n    return (\n        <Card className=\"card\" style={{margin: '2px', height: '100%'}}>\n            <Card.Title className=\"card-header-first\">{props.title}</Card.Title>\n            <Card.Body style={{padding: '0px'}}>\n                <Chart\n                    options={chartOptions.options}\n                    series={chartOptions.series}\n                    type={'bar'}\n                    width=\"100%\"\n                    height=\"100%\"/>\n            </Card.Body>\n        </Card>\n    );\n};\nexport default HomePageBarChart;","import HomePageBarChart from \"../HomePageCharts/HomePageBarChart\";\n// Bootstrap Imports\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport {useEffect, useState} from \"react\";\nimport axios from \"axios\";\n\nconst TopLevel = (props) =>{\n    const [responseData, setResponseData] = useState([]);\n    const findCumulativeSum = arr => {\n        const creds = arr.reduce((acc, val) => {\n            let {sum, res} = acc;\n            sum += val;\n            res.push(sum);\n            return {sum, res};\n        }, {\n            sum: 0,\n            res: []\n        });\n        return creds.res;\n    };\n    useEffect(() => {\n            axios.get(props.server + 'home/daily_robot_balances', {\n                params: {\n                    env: props.env,\n                }\n            })\n                .then(response => setResponseData(response['data'].map(data=>data['y'])))\n                .catch((error) => {\n                    console.error('Error Message:', error);\n                });\n        }, [props]\n    );\n    return (\n        <Row style={{height: '600px', width: '100%', margin: '0px', padding: '0px'}}>\n            <Col style={{height: '100%', width: '50%'}}>\n                <HomePageBarChart data={findCumulativeSum(responseData)} title={'Total Cumulative Year to Date P&L'} id={'aggregated-pnl-chart'}/>\n            </Col>\n            <Col style={{height: '100%', width: '50%'}}>\n                <HomePageBarChart data={responseData} title={'Daily P&L'} id={'daily-aggregated-pnl-chart'}/>\n            </Col>\n        </Row>\n    )\n};\n\nexport default TopLevel;","import Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Chart from \"react-apexcharts\";\n\nconst CardWidget = (props) => {\n    return (\n        <Card className=\"card\" style={{margin:'0px'}}>\n            <Card.Title style={{margin:'0px'}} className=\"card-header-first\">{props.title}</Card.Title>\n            <Card.Body style={{display:'flex', justifyContent:'center', padding: '5px'}}>\n                {props.children}\n            </Card.Body>\n        </Card>\n    );\n};\n\nexport default CardWidget","// Bootstrap Imports\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nimport CardWidget from \"../../../components/CardWidget\";\nimport {useEffect, useState} from \"react\";\nimport axios from \"axios\";\n\nconst PnLPanel = (props) => {\n    const date = new Date().toISOString().substr(0,10);\n    const [dtdData, setDtdData] = useState(0.0);\n    const [mtdData, setMtdData] = useState(0.0);\n    const [ytdData, setYtdData] = useState(0.0);\n\n    useEffect(() => {\n            axios.get(props.server + 'home/total_robot_pnl/', {\n                params: {\n                    start_date: date,\n                    env: props.env,\n                }\n            })\n                .then(response => setDtdData(response['data'][0]['data']))\n                .catch((error) => {\n                    console.error('Error Message:', error);\n                });\n        }, [props]\n    );\n\n    useEffect(() => {\n            axios.get(props.server + 'home/total_robot_pnl/', {\n                params: {\n                    start_date: date.substr(0,7)+'-01',\n                    env: props.env,\n                }\n            })\n                .then(response => setMtdData(response['data'][0]['data']))\n                .catch((error) => {\n                    console.error('Error Message:', error);\n                });\n        }, [props]\n    );\n    useEffect(() => {\n            axios.get(props.server + 'home/total_robot_pnl/', {\n                params: {\n                    start_date: date.substr(0,4)+'-01-01',\n                    env: props.env,\n                }\n            })\n                .then(response => setYtdData(response['data'][0]['data']))\n                .catch((error) => {\n                    console.error('Error Message:', error);\n                });\n        }, [props]\n    );\n    return (\n        <Row style={{height: '150px', width: '100%', margin: '0px', padding: '10px'}}>\n            <Col style={{height: '100%'}}>\n                <CardWidget title={'DTD'}>\n                    <h1 style={{\n                        margin: 'auto',\n                        verticalAlign: 'middle',\n                        color: dtdData < 0.0 ? 'red' : 'green'\n                    }}>{dtdData}</h1>\n                </CardWidget>\n            </Col>\n            <Col style={{height: '100%'}}>\n                <CardWidget title={'MTD'}>\n                    <h1 style={{\n                        margin: 'auto',\n                        verticalAlign: 'middle',\n                        color: mtdData < 0.0 ? 'red' : 'green'\n                    }}>{mtdData}</h1>\n                </CardWidget>\n            </Col>\n            <Col style={{height: '100%'}}>\n                <CardWidget title={'YTD'}>\n                    <h1 style={{\n                        margin: 'auto',\n                        verticalAlign: 'middle',\n                        color: ytdData < 0.0 ? 'red' : 'green'\n                    }}>{ytdData}</h1>\n                </CardWidget>\n            </Col>\n        </Row>\n    );\n};\n\nexport default PnLPanel;","import Card from \"react-bootstrap/Card\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Chart from \"react-apexcharts\";\nimport {useEffect, useState} from \"react\";\nimport axios from \"axios\";\n\nconst PieCharts = (props) => {\n\n    const chartOptions = {\n        options: {\n            // chart: {\n            //     toolbar: false,\n            // },\n            labels: props.labels,\n            dataLabels: {\n                enabled: true,\n                formatter: function (val) {\n                    return (Math.round(val * 100) / 100) + '%'\n                },\n            },\n        },\n        series: props.data\n    };\n    return (\n         <Card className=\"card\" style={{margin: '0px'}}>\n            <Card.Title className=\"card-header-first\">{props.title}</Card.Title>\n            <Card.Body style={{padding: '0px'}}>\n                <Row style={{height: '100%'}}>\n                    <Col style={{height: '100%'}}>\n                        <Chart\n                            options={chartOptions.options}\n                            series={chartOptions.series}\n                            type={'donut'}\n                            width=\"100%\"\n                            height=\"100%\"\n                        />\n                    </Col>\n                </Row>\n            </Card.Body>\n        </Card>\n    );\n};\n\nexport default PieCharts;\n\n\n\n\n\n","import CardWidget from \"../../../components/CardWidget\";\nimport PieCharts from \"../../../components/Charts/PieCharts\";\n\n// Bootstrap imports\nimport Row from \"react-bootstrap/Row\";\nimport Col from 'react-bootstrap/Col';\nimport {useEffect, useState} from \"react\";\nimport axios from \"axios\";\n\nconst BalanceDashBoard = (props) => {\n    const [chData, setChData] =  useState([])//balanceData.map(data=>data['y'])\n    const [labelData, setLabelData] =  useState([])//balanceData.map(data=>data['x'])\n    const totalBalance = chData.reduce((a, b) => a + b, 0)\n\n    useEffect(() => {\n            axios.get(props.server + 'home/total_robot_balances_by_date/',{\n                params: {\n                    env: props.env,\n                }})\n                .then(function (response) {\n                    setChData(response['data'].map(item => item['y']));\n                    setLabelData(response['data'].map(item => item['x']))\n                })\n                .catch((error) => {\n                    console.error('Error Message:', error);\n                });\n        }, [props]\n    );\n\n    return (\n        <Row style={{height: '300px', width: '100%', margin: '0px', padding: '0px'}}>\n            <Col style={{height: '100%'}}>\n                <CardWidget title={'Total Balance'}>\n                    <h1 style={{margin:'auto', verticalAlign:'middle'}}>{Math.round(totalBalance * 100)/100}</h1>\n                </CardWidget>\n            </Col>\n            <Col style={{height: '100%'}}>\n                <PieCharts title={'Balance by Robots'} data={chData} labels={labelData}/>\n            </Col>\n        </Row>\n    );\n};\n\nexport default BalanceDashBoard;","import Card from \"react-bootstrap/Card\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Chart from \"react-apexcharts\";\n\n\nconst BarCharting = (props) => {\n    const yMax = Math.max(...props.data);\n    console.log(props.data)\n    const chartOptions = {\n        options: {\n            // chart: {\n            //     toolbar: true,\n            // },\n            plotOptions: {\n                bar: {\n                    horizontal: props.horizontal\n                }\n            },\n            xaxis: {\n                categories: [],\n                labels: {show: false}\n            },\n            yaxis: [\n                {\n                    tickAmount: 10,\n                    labels: {\n                        show: true,\n                        style: {\n                            colors: [],\n                            fontSize: '12px',\n                            fontFamily: 'Helvetica, Arial, sans-serif',\n                            fontWeight: 400,\n                            cssClass: 'apexcharts-yaxis-label',\n                        },\n                        // formatter: function (val) {\n                        //     return val.toFixed(0);\n                        // }\n                    },\n                }\n            ],\n            dataLabels: {\n                enabled: true\n            },\n        },\n        series: [\n            {\n                name: \"Aggregated Robot Profit and Loss\",\n                data: props.data,\n            }\n        ]\n    };\n\n    return (\n        <Card className=\"card\" style={{margin:'0px'}}>\n            <Card.Title className=\"card-header-first\">{props.title}</Card.Title>\n            <Card.Body style={{padding: '0px'}}>\n                <Row style={{height: '100%'}}>\n                    <Col style={{height: '100%'}}>\n                        <Chart\n                            options={chartOptions.options}\n                            series={chartOptions.series}\n                            type={'bar'}\n                            width=\"100%\"\n                            height=\"100%\"\n                        />\n                    </Col>\n                </Row>\n            </Card.Body>\n        </Card>\n    );\n};\n\nexport default BarCharting;","import Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\n\nimport BarCharting from \"../../../components/Charts/BarCharting\";\nimport {useEffect, useState} from \"react\";\nimport axios from \"axios\";\n\nconst ContributionPnl = (props) => {\n    const date = new Date().toISOString().substr(0,10);\n    const [dtdData, setDtdData] = useState([]);\n    const [mtdData, setMtdData] = useState([]);\n    const [ytdData, setYtdData] = useState([]);\n\n    useEffect(() => {\n            axios.get(props.server + 'home/robot_pnl/', {\n                params: {\n                    start_date: date,\n                    env: props.env,\n                }\n            })\n                .then(response => setDtdData(response['data']))\n                .catch((error) => {\n                    console.error('Error Message:', error);\n                });\n        }, [props]\n    );\n\n    useEffect(() => {\n            axios.get(props.server + 'home/robot_pnl/', {\n                params: {\n                    start_date: date.substr(0,7)+'-01',\n                    env: props.env,\n                }\n            })\n                .then(response => setMtdData(response['data']))\n                .catch((error) => {\n                    console.error('Error Message:', error);\n                });\n        }, [props]\n    );\n    useEffect(() => {\n            axios.get(props.server + 'home/robot_pnl/', {\n                params: {\n                    start_date: date.substr(0,4)+'-01-01',\n                    env: props.env,\n                }\n            })\n                .then(response => setYtdData(response['data']))\n                .catch((error) => {\n                    console.error('Error Message:', error);\n                });\n        }, [props]\n    );\n\n    return (\n        <Row style={{height: '300px', width: '100%', margin: '0px', padding: '10px'}}>\n            <Col style={{height: '100%'}}>\n                <BarCharting data={dtdData} horizontal={false} xLabel={true}/>\n            </Col>\n            <Col style={{height: '100%'}}>\n                <BarCharting data={mtdData} horizontal={false} xLabel={true}/>\n            </Col>\n            <Col style={{height: '100%'}}>\n                <BarCharting data={ytdData} horizontal={false} xLabel={true}/>\n            </Col>\n        </Row>\n    );\n};\n\nexport default ContributionPnl;","import Container from \"react-bootstrap/Container\";\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nimport PerfDashBoard from \"./HomePage/PerfDashBoard\";\nimport {useContext, useEffect, useState} from \"react\";\n\nimport RobotStatCards from \"./HomePage/RobotStatCards\";\nimport RobotExecution from \"./HomePage/RobotExecution/RobotExecution\";\nimport SystemMessages from \"./HomePage/SystemMessages/SystemMessages\";\n\nimport TopLevel from \"./HomePage/DashBoard/TopLevel\";\nimport PnLPanel from \"./HomePage/DashBoard/PnLPanel\";\nimport BalanceDashBoard from \"./HomePage/DashBoard/BalanceDashboard\";\nimport ContributionPnl from \"./HomePage/DashBoard/ContributionPnl\";\n\n// Chart Imports\nimport BarCharting from \"../components/Charts/BarCharting\";\n\n\n//CSS\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './HomePage.css';\n\n// Contexts\nimport EnvContext from \"../context/env-context\";\nimport ServerContext from \"../context/server-context\";\nimport axios from \"axios\";\n\nconst HomePage = (props) => {\n    // Context variables\n    const env = useContext(EnvContext)['environment'];\n    const server = useContext(ServerContext)['server'];\n    const startDate = new Date().toISOString().substr(0,10);\n    const [date, setDate] = useState(startDate);\n\n    const dateHandler = (event) => {\n        setDate(event.target.value);\n    };\n\n    return (\n        <Container style={{background: '#FBFAFA', width: \"100%\", height: window.innerHeight}} fluid>\n            <Row style={{height: window.innerHeight}}>\n                <Col style={{height: '800px', width:'50%', margin:'15px'}}>\n                    <h4 style={{textAlign:'left', marginTop:'0px', marginBottom:'15px'}}>Balance</h4>\n                    <BalanceDashBoard server={server} env={env}/>\n                    <h4 style={{textAlign:'left', marginTop:'15px'}}>Total Robot Results</h4>\n                    <TopLevel server={server} env={env} />\n                </Col>\n                <Col style={{height: '800px', width:'50%', margin:'15px'}}>\n                    <h4>Profit</h4>\n                    <PnLPanel server={server} env={env}/>\n                    <ContributionPnl server={server} env={env}/>\n                    <h4>Performance</h4>\n                    <PerfDashBoard server={server} env={env} env={env}/>\n                </Col>\n            </Row>\n        </Container>\n    );\n};\n\nexport default HomePage;","// Bootstrap\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport Modal from \"react-bootstrap/Modal\";\n\nimport {useState} from \"react\";\nimport axios from \"axios\";\n\nconst NewPortfolioForm = (props) => {\n\n    const [portfolioName, setPortfolioName] = useState('');\n    const [portfolioCode, setPortfolioCode] = useState('');\n    const [portType, setPortType] = useState('Trade');\n    const [currency, setCurrency] = useState('USD');\n\n    const handleClose = () => {\n        props.hide();\n    };\n\n    const portfolioNameChangeHandler = (event) => {\n        setPortfolioName(event.target.value)\n    };\n\n    const portfolioCodeChangeHandler = (event) => {\n        setPortfolioCode(event.target.value);\n    };\n\n    const portTypeHandler = (event) => {\n        setPortType(event.target.value)\n    };\n\n    const currencyHandler = (event) => {\n        setCurrency(event.target.value);\n    };\n\n    console.log(portfolioName, portType, currency)\n\n    const submitHandler = (event) => {\n        event.preventDefault();\n\n        axios.post(props.server + 'portfolios/new/', {\n            port_name: portfolioName,\n            port_type: portType,\n            port_currency: currency,\n            port_code: portfolioCode,\n        })\n            .then(function (response) {\n                if (response['data'] == 'New Portfolio is created!') {\n                    alert('New portfolio is created!')\n                    props.hide();\n                } else {\n                    alert(response['data']);\n                }\n            })\n            .catch((error) => {\n                console.error('Error Message:', error);\n            });\n    };\n\n    return (\n        <>\n            <Modal show={props.show} onHide={handleClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title>New Portfolio</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <Form onSubmit={submitHandler} style={{width: '100%'}}>\n                        <Form.Group>\n                            <Form.Label>Portfolio Name</Form.Label>\n                            <Form.Control onChange={portfolioNameChangeHandler} type=\"text\" placeholder=\"Portfolio Name\" required/>\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>Portfolio Code</Form.Label>\n                            <Form.Control onChange={portfolioCodeChangeHandler} type=\"text\" placeholder=\"Portfolio Code\" required/>\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>Portfolio Type</Form.Label>\n                            <Form.Control onChange={portTypeHandler} as=\"select\">\n                                <option value={'Trade'}>Trade</option>\n                                <option value={'Savings'}>Savings</option>\n                                <option value={'Investment'}>Investment</option>\n                            </Form.Control>\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>Portfolio Currency</Form.Label>\n                            <Form.Control onChange={currencyHandler} as=\"select\">\n                                <option value={'USD'}>USD</option>\n                                <option value={'HUF'}>HUF</option>\n                                <option value={'EUR'}>EUR</option>\n                            </Form.Control>\n                        </Form.Group>\n                    </Form>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={handleClose}>\n                        Close\n                    </Button>\n                    <Button variant=\"primary\" onClick={submitHandler}>\n                        Save\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </>\n    );\n};\n\nexport default NewPortfolioForm;","import {useState} from \"react\";\nimport axios from \"axios\";\n\nimport Button from \"react-bootstrap/Button\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Col from 'react-bootstrap/Col'\nimport Row from 'react-bootstrap/Row';\nimport Form from \"react-bootstrap/Form\";\nimport TreeView from \"@mui/lab/TreeView\";\nimport ExpandMoreIcon from \"@mui/icons-material/ExpandMore\";\nimport ChevronRightIcon from \"@mui/icons-material/ChevronRight\";\nimport TreeItem from \"@mui/lab/TreeItem\";\n\nconst PositionCalculation = (props) => {\n    const date = new Date();\n    const firstDay = new Date(date.getFullYear(), date.getMonth(), 1);\n    const [startDate, setStartDate] = useState(firstDay.toISOString().substr(0,10));\n    const [endDate, setEndDate] = useState(date.toISOString().substr(0,10));\n    const [response, setResponse] = useState([]);\n    const [portfolio, setPortfolio] = useState(props.portfolio);\n    const treeData = response.map(function (data, index) {\n\n        return <TreeItem nodeId={index.toString()} label={data['portfolio']}>\n            {data['response'].map((item, index2) => <TreeItem nodeId={index.toString() + index2.toString()}\n                                                              label={item['date']}>\n                {item['msgs'].map(item2 => <TreeItem\n                    label={item2['msg']}></TreeItem>)}\n            </TreeItem>)}\n        </TreeItem>\n    });\n    const startDateHandler = (event) => {\n        setStartDate(event.target.value);\n    };\n\n    const endDateHandler = (event) => {\n        setEndDate(event.target.value);\n    };\n\n    const handleClose = () => {\n        props.hide();\n    };\n    const changePortfolio = (event) => {\n        if (event.target.checked){\n            setPortfolio('ALL');\n        }else {\n            setPortfolio(props.portfolio);\n        };\n    };\n    const submitHandler = (event) => {\n        event.preventDefault();\n        axios.post(props.server + 'portfolios/positions/', {\n            portfolio: portfolio,\n            start_date: startDate,\n            end_date: endDate,\n        })\n            .then(response => setResponse(response['data']))\n            .catch((error) => {\n                console.error('Error Message:', error);\n            });\n    };\n    return (\n        <Modal show={props.show} onHide={handleClose} size={'xl'}>\n            <Modal.Header closeButton>\n                <Modal.Title>Portfolio Position Calculation - {portfolio}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body style={{height: '300px'}}>\n                <Row style={{height: '100%'}}>\n                    <Col style={{height: '100%'}}>\n                        <Form onSubmit={submitHandler} style={{width: '100%', height: '100%'}}>\n                            <Row style={{height: '60px', width: '100%', padding: '5px', margin: '5px'}}>\n                                <Row style={{width: '100%', margin: '0px'}}>\n                                    <Form.Group style={{width: '100%', margin: '0px'}}>\n                                        <Form.Label className=\"form-label-first\" column sm={2}>\n                                            From\n                                        </Form.Label>\n                                        <Col sm={10}>\n                                            <Form.Control type=\"date\" onChange={startDateHandler}\n                                                          defaultValue={firstDay.toISOString().substr(0, 10)}/>\n                                        </Col>\n                                    </Form.Group>\n                                </Row>\n                                <Row style={{width: '100%', margin: '0px'}}>\n                                    <Form.Group style={{width: '100%'}}>\n                                        <Form.Label className=\"form-label-first\" column sm={2}>\n                                            To\n                                        </Form.Label>\n                                        <Col sm={10}>\n                                            <Form.Control type=\"date\" onChange={endDateHandler}\n                                                          defaultValue={date.toISOString().substr(0, 10)}/>\n                                        </Col>\n                                    </Form.Group>\n                                </Row>\n                            </Row>\n                        </Form>\n                    </Col>\n                    <Col style={{height: '100%'}}>\n                        <TreeView\n                            aria-label=\"file system navigator\"\n                            defaultCollapseIcon={<ExpandMoreIcon/>}\n                            defaultExpandIcon={<ChevronRightIcon/>}\n                            sx={{height: '100%', flexGrow: 1, maxWidth: '100%', overflowY: 'auto',}}\n                        >\n                            {treeData}\n                        </TreeView>\n                    </Col>\n                </Row>\n            </Modal.Body>\n            <Modal.Footer style={{width: '100%', margin: '0px'}}>\n                <Row style={{width: '100%', margin: '0px'}}>\n                    <Col>\n                        <Row>\n                            <Col>\n                                <Form.Group className=\"mb-3\" controlId=\"formBasicCheckbox\">\n                                    <Form.Check onClick={changePortfolio} type=\"checkbox\" label=\"All Portfolios\"/>\n                                </Form.Group>\n                            </Col>\n                            <Col>\n                                <Form.Group className=\"mb-3\" controlId=\"formBasicCheckbox\">\n                                    <Form.Check onClick={changePortfolio} type=\"checkbox\" label=\"Since Inception\"/>\n                                </Form.Group>\n                            </Col>\n                        </Row>\n\n                    </Col>\n                    <Col>\n                        <Form.Group style={{width: '100%'}}>\n                            <Col sm={10}>\n                                <Button variant=\"primary\" onClick={submitHandler} style={{width: '100%'}}>\n                                    Calculate\n                                </Button>\n                            </Col>\n                        </Form.Group>\n                    </Col>\n                </Row>\n            </Modal.Footer>\n        </Modal>\n    );\n};\n\nexport default PositionCalculation;","import {useState} from \"react\";\nimport axios from \"axios\";\n\nimport Button from \"react-bootstrap/Button\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Col from 'react-bootstrap/Col'\nimport Row from 'react-bootstrap/Row';\nimport Form from \"react-bootstrap/Form\";\n\n// MUI\nimport TreeView from '@mui/lab/TreeView';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport ChevronRightIcon from '@mui/icons-material/ChevronRight';\nimport TreeItem from '@mui/lab/TreeItem';\n\nconst CashHoldingCalculation = (props) => {\n    const date = new Date();\n    const firstDay = new Date(date.getFullYear(), date.getMonth(), 1);\n    const [startDate, setStartDate] = useState(firstDay.toISOString().substr(0,10));\n    const [endDate, setEndDate] = useState(date.toISOString().substr(0,10));\n    const [response, setResponse] = useState([]);\n    const [portfolio, setPortfolio] = useState(props.portfolio);\n    const treeData = response.map(function (data, index) {\n        let treeNodes = data['response'].map(item => <TreeItem label={item['date'] + \" \" + item['msg']}></TreeItem>);\n        return <TreeItem nodeId={index.toString()} label={data['portfolio']}>\n            {treeNodes}\n        </TreeItem>\n    });\n\n    const startDateHandler = (event) => {\n        setStartDate(event.target.value);\n    };\n\n    const endDateHandler = (event) => {\n        setEndDate(event.target.value);\n    };\n\n    const handleClose = () => {\n        props.hide();\n    };\n\n    const changePortfolio = (event) => {\n        if (event.target.checked){\n            setPortfolio('ALL');\n        }else {\n            setPortfolio(props.portfolio);\n        };\n        console.log(event.target.checked)\n    };\n\n    const submitHandler = (event) => {\n        event.preventDefault();\n\n        axios.post(props.server + 'portfolios/cash_holding/', {\n            portfolio: portfolio,\n            start_date: startDate,\n            end_date: endDate,\n        })\n            .then(response => setResponse(response['data']))\n            .catch((error) => {\n                console.error('Error Message:', error);\n            });\n    };\n    return (\n        <Modal show={props.show} onHide={handleClose} size={'xl'}>\n            <Modal.Header closeButton>\n                <Modal.Title>Cash Holding Calculation - {portfolio}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body style={{width: '100%', height: '300px'}}>\n                <Row style={{height:'100%'}}>\n                    <Col style={{height:'100%'}}>\n                        <Form onSubmit={submitHandler} style={{width: '100%', height:'100%'}}>\n                            <Row style={{height: '60px', width: '100%', padding: '5px', margin: '5px'}}>\n                                <Row style={{width: '100%', margin: '0px'}}>\n                                    <Form.Group style={{width: '100%', margin: '0px'}}>\n                                        <Form.Label className=\"form-label-first\" column sm={2}>\n                                            From\n                                        </Form.Label>\n                                        <Col sm={10}>\n                                            <Form.Control type=\"date\" onChange={startDateHandler}\n                                                          defaultValue={firstDay.toISOString().substr(0, 10)}/>\n                                        </Col>\n                                    </Form.Group>\n                                </Row>\n                                <Row style={{width: '100%', margin: '0px'}}>\n                                    <Form.Group style={{width: '100%'}}>\n                                        <Form.Label className=\"form-label-first\" column sm={2}>\n                                            To\n                                        </Form.Label>\n                                        <Col sm={10}>\n                                            <Form.Control type=\"date\" onChange={endDateHandler}\n                                                          defaultValue={date.toISOString().substr(0, 10)}/>\n                                        </Col>\n                                    </Form.Group>\n                                </Row>\n                            </Row>\n                        </Form>\n                    </Col>\n                    <Col style={{height:'100%'}}>\n                        <TreeView\n                            aria-label=\"file system navigator\"\n                            defaultCollapseIcon={<ExpandMoreIcon/>}\n                            defaultExpandIcon={<ChevronRightIcon/>}\n                            sx={{height: '100%', flexGrow: 1, maxWidth: '100%', overflowY: 'auto',}}\n                        >\n                            {treeData}\n                        </TreeView>\n                    </Col>\n                </Row>\n            </Modal.Body>\n            <Modal.Footer style={{width: '100%', margin: '0px'}}>\n                <Row style={{width: '100%', margin: '0px'}}>\n                    <Col>\n                         <Form.Group className=\"mb-3\" controlId=\"formBasicCheckbox\">\n                        <Form.Check onClick={changePortfolio} type=\"checkbox\" label=\"All Portfolios\"/>\n                    </Form.Group>\n                    </Col>\n                    <Col>\n                        <Form.Group style={{width: '100%'}}>\n                        <Col sm={10}>\n                            <Button variant=\"primary\" onClick={submitHandler} style={{width: '100%'}}>\n                                Calculate\n                            </Button>\n                        </Col>\n                    </Form.Group>\n                    </Col>\n                </Row>\n            </Modal.Footer>\n        </Modal>\n    );\n};\n\nexport default CashHoldingCalculation;","import {useEffect, useState} from \"react\";\nimport axios from \"axios\";\nimport Form from \"react-bootstrap/Form\";\n\nconst GetRobotLastPrice = (props) => {\n\n    const [price, setPrice] = useState(0.0);\n    const [date, setDate] = useState();\n\n    useEffect(() => {\n            axios.get(props.server + 'robots/get_last_price/', {\n                params: {\n                    robot: props.robot,\n                    // start_date: props.start_date,\n                    // end_date: props.end_date,\n                }\n            })\n                .then(function(response){\n                    setPrice(response['data']['price']);\n                    setDate(response['data']['date']);\n                    props.getPrice(price);\n                })\n                .catch((error) => {\n                    console.error('Error Message:', error);\n                });\n        }, [props]\n    );\n\n    return (\n        <Form.Group>\n            <Form.Label>Price - {date}</Form.Label>\n            <h2>{Math.round((price) * 100) / 100}</h2>\n        </Form.Group>\n    );\n};\n\nexport default GetRobotLastPrice;\n","import Button from \"react-bootstrap/Button\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Form from \"react-bootstrap/Form\";\nimport {useEffect, useState} from \"react\";\n\nimport OptionLoader from \"../../components/Options\";\nimport GetRobotPrice from \"../Robot/GetRobotPrice\";\n\nimport axios from \"axios\";\n\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\n\nconst PortfolioBuy = (props) => {\n    const [securityId, setSecurity] = useState('');\n    const [securityName, setSecurityName] = useState('');\n    const [unit, setUnit] = useState(0.0);\n    const [robotPrice, setRobotPrice] = useState(0.0);\n    const [robotQuantity, setRobotQuantity] = useState(0.0);\n\n    const instrumentParams = {\n        'env': props.env,\n    };\n\n    const handleClose = () => {\n        props.hide();\n    };\n\n    const securityHandler = (event) => {\n        const selectIndex = event.nativeEvent.target.selectedIndex;\n\n        setSecurity(event.target.value);\n        setSecurityName(event.nativeEvent.target[selectIndex].text);\n        document.getElementById('unitInput').value = 0;\n        setRobotQuantity(0);\n        setUnit(0);\n    };\n\n    const unitHandler = (event) => {\n        setRobotQuantity(unit/robotPrice);\n        setUnit(event.target.value);\n\n    };\n\n    const getRobotPrice = (price) => {\n        setRobotPrice(price);\n        setRobotQuantity(unit/robotPrice);\n    };\n\n    const submitHandler = (event) => {\n        event.preventDefault();\n        if (robotQuantity===0.0){\n            alert('Quantity can not be 0 !')\n        }else{\n            axios.post(props.server + 'portfolios/portfolio_trade/', {\n            portfolio: props.portfolio,\n            unit: robotQuantity,\n            price: robotPrice,\n            sec: securityName,\n            sec_type: 'Robot',\n            sec_id: securityId,\n        })\n                .then(response => alert(response['data']))\n                .catch((error) => {\n                    console.error('Error Message:', error);\n                });\n        props.hide();\n        };\n    };\n\n    return (\n        <>\n            <Modal show={props.show} onHide={handleClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Buy Robot</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <Form onSubmit={submitHandler} style={{width: '100%'}}>\n                        <Row>\n                            <Col>\n                                <Form.Group>\n                                    <Form.Label>Portfolio</Form.Label>\n                                    <Form.Control type=\"text\" placeholder={props.portfolio} value={props.portfolio}\n                                                  readOnly/>\n                                </Form.Group>\n                            </Col>\n                            <Col>\n                                <Form.Group>\n                                    <Form.Label>Available Cash (USD)</Form.Label>\n                                    <Form.Control type=\"text\" placeholder={'2000'} value={'2000'}\n                                                  readOnly/>\n                                </Form.Group>\n                            </Col>\n                        </Row>\n\n                        <Row>\n                            <Col>\n                                <Form.Group>\n                                    <Form.Label>Robot</Form.Label>\n                                    <Form.Control onChange={securityHandler} as=\"select\">\n                                        <option></option>\n                                        <OptionLoader\n                                            url={props.server + 'robots/get_robots_with_instrument/'}\n                                            params={instrumentParams}\n                                            code={1}\n                                            value={2}/>\n                                    </Form.Control>\n                                </Form.Group>\n                            </Col>\n                            <Col>\n                                <GetRobotPrice server={props.server} robot={securityName} getPrice={getRobotPrice}/>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col>\n                                <Form.Group>\n                                    <Form.Label>Unit to invest</Form.Label>\n                                    <Form.Control onChange={unitHandler} type=\"number\" min={0.0}\n                                                  defaultValue={0} id={'unitInput'}/>\n                                </Form.Group>\n                            </Col>\n                            <Col>\n                                <Form.Label>Portfolio Quantity</Form.Label>\n                                <h2>{Math.round(robotQuantity*100)/100}</h2>\n                            </Col>\n                        </Row>\n                    </Form>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={handleClose}>\n                        Close\n                    </Button>\n                    <Button variant=\"primary\" onClick={submitHandler}>\n                        Save\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </>\n    );\n};\n\nexport default PortfolioBuy;","import Form from \"react-bootstrap/Form\";\nimport {useState} from \"react\";\nimport axios from \"axios\";\nimport Button from \"react-bootstrap/Button\";\nimport Modal from \"react-bootstrap/Modal\";\n\nconst NewPortCashFlow = (props) => {\n    const handleClose = () => {\n        props.hide();\n    };\n    const [value, setValue] = useState(0.0);\n    const [type, setType] = useState('INFLOW');\n    const [currency, setCurrency] = useState('USD');\n    const valueHandler = (event) => {\n        setValue(event.target.value);\n    };\n    const cashTypeHandler = (event) => {\n        setType(event.target.value);\n    };\n    const currencyHandler = (event) => {\n        setCurrency(event.target.value);\n    }\n    const submitHandler = (event) => {\n        event.preventDefault();\n        console.log('form submited')\n        axios.post(props.server + 'portfolios/new_cash_flow/', {\n            port_name: props.portfolio,\n            amount: value,\n            type: type,\n            currency: currency,\n        })\n                .then(response => alert(response['data']))\n                .catch((error) => {\n                    console.error('Error Message:', error);\n                });\n        setCurrency('USD');\n    };\n    return (\n        <Modal show={props.show} onHide={handleClose}>\n            <Modal.Header closeButton>\n                <Modal.Title>Funding</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <Form onSubmit={submitHandler} style={{width: '100%'}}>\n                    <Form.Group>\n                        <Form.Label>Portfolio</Form.Label>\n                        <Form.Control type=\"text\" placeholder={props.portfolio} value={props.portfolio} readOnly/>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label>Cash Flow</Form.Label>\n                        <Form.Control onChange={valueHandler} type=\"number\" placeholder=\"Value\"/>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label>Currency</Form.Label>\n                        <Form.Control onChange={currencyHandler} as=\"select\">\n                            <option value={'USD'}>USD</option>\n                            <option value={'EUR'}>EUR</option>\n                        </Form.Control>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label>Type</Form.Label>\n                        <Form.Control onChange={cashTypeHandler} as=\"select\">\n                            <option value={'INFLOW'}>Inflow</option>\n                        </Form.Control>\n                    </Form.Group>\n                </Form>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={handleClose}>\n                    Close\n                </Button>\n                <Button variant=\"primary\" onClick={submitHandler}>\n                    Save\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n};\n\nexport default NewPortCashFlow;","import Modal from \"react-bootstrap/Modal\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport {useState} from \"react\";\n\nimport axios from \"axios\";\n\nconst NewBrokerAccount = (props) => {\n\n    const [broker, setBroker] = useState('');\n    const [accountNumber, setAccountNumber] = useState('');\n    const [token, setToken] = useState('');\n    const [env, setEnv] = useState('live');\n    const [currency, setCurrency] = useState('USD');\n\n    const onHide = () => {\n        props.hide();\n    };\n\n    const submitHandler = () => {\n        axios.post(props.server + 'accounts/new_account/', {\n            broker_name: broker,\n            account_number: accountNumber,\n            env: env,\n            token: token,\n            currency: currency,\n        })\n                .then(response => alert(response['data']))\n                .catch((error) => {\n                    console.error('Error Message:', error);\n                });\n        setBroker('');\n        setAccountNumber('');\n        setToken('');\n        setEnv('live');\n        setCurrency('USD');\n        props.hide();\n    };\n\n    const brokerNameHandler = (event) => {\n        setBroker(event.target.value);\n    };\n\n    const accountNumberHandler = (event) => {\n        setAccountNumber(event.target.value);\n    };\n\n    const tokenHandler = (event) => {\n        setToken(event.target.value);\n    };\n\n    const envHandler = (event) => {\n        setEnv(event.target.value);\n    };\n\n    const currencyHandler = (event) => {\n        setCurrency(event.target.value);\n    };\n\n    return (\n        <Modal show={props.show} onHide={onHide} animation={false}>\n            <Modal.Header closeButton>\n                <Modal.Title>New Account</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <Form.Group>\n                    <Form.Control onChange={brokerNameHandler} type=\"text\" placeholder=\"Broker Name\"/>\n                </Form.Group>\n                <Form.Group>\n                    <Form.Control onChange={accountNumberHandler} type=\"text\" placeholder=\"Account Number\"/>\n                </Form.Group>\n                <Form.Group>\n                    <Form.Control onChange={tokenHandler} type=\"text\" placeholder=\"Token\"/>\n                </Form.Group>\n                <Form.Group>\n                    <Form.Label>Environment</Form.Label>\n                    <Form.Control onChange={envHandler} as=\"select\">\n                        <option value={'live'}>Live</option>\n                        <option value={'demo'}>Demo</option>\n                    </Form.Control>\n                </Form.Group>\n                <Form.Group>\n                    <Form.Label>Currency</Form.Label>\n                    <Form.Control onChange={currencyHandler} as=\"select\">\n                        <option value={'USD'}>USD</option>\n                        <option value={'EUR'}>EUR</option>\n                    </Form.Control>\n                </Form.Group>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={onHide}>\n                    Close\n                </Button>\n                <Button variant=\"primary\" onClick={submitHandler}>\n                    Save\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n};\n\nexport default NewBrokerAccount;","import React, {useState, useEffect, useContext} from \"react\";\n\nconst PortfolioContext = React.createContext();\n\nexport default PortfolioContext;","const PortfolioRiskPage = (props) => {\n    return (\n        <>\n            <h2>Portfolio Risk</h2>\n        </>\n    );\n};\n\nexport default PortfolioRiskPage;","import Card from \"react-bootstrap/Card\";\nimport Container from 'react-bootstrap/Container'\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\n\n// CSS\nimport \"../../../PortfolioPage.css\"\nimport \"../../../MainCSS.css\"\nimport Table from \"react-bootstrap/Table\";\nimport Form from \"react-bootstrap/Form\";\nimport {useState} from \"react\";\n\nconst Holdings = () => {\n    const date = new Date();\n    const [startDate, setStartDate] = useState(date.toISOString().substr(0,10));\n    const startDateHandler = (event) => {\n        setStartDate(event.target.value);\n    };\n    return (\n        <Card className=\"card\">\n            <Row>\n                <Col>\n                    <Card.Title className=\"card-header-first\">Holdings</Card.Title>\n                </Col>\n                <Col>\n                    <Form.Group as={Row} style={{margin:'0px', padding:'5px'}}>\n                        <Form.Label className=\"form-label-first\" column sm={2}>\n                            Date\n                        </Form.Label>\n                        <Col sm={10}>\n                            <Form.Control type=\"date\" onChange={startDateHandler}\n                                          defaultValue={date.toISOString().substr(0,10)}/>\n                        </Col>\n                    </Form.Group>\n                </Col>\n            </Row>\n            <div style={{height: '100%', overflowY: 'scroll', overflowX: 'hidden'}}>\n                <Table>\n                    <thead className=\"table-header-first\">\n                    <tr>\n                        <td className=\"table-header-row\">Starting Quantity</td>\n                        <td className=\"table-header-row\">Price</td>\n                        <td className=\"table-header-row\">Market Value</td>\n                        <td className=\"table-header-row\">Trade Date</td>\n                        <td className=\"table-header-row\">Instrument</td>\n                        <td className=\"table-header-row\">Instrument Type</td>\n                        <td className=\"table-header-row\">Source</td>\n                    </tr>\n                    </thead>\n                    <tbody>\n\n                    </tbody>\n                </Table>\n            </div>\n        </Card>\n    );\n};\n\nexport default Holdings;","\nimport Holdings from \"./Holdings\";\n\nconst PortfolioHoldingsPage = (props) => {\n    return (\n        <>\n            <Holdings/>\n        </>\n    );\n};\n\nexport default PortfolioHoldingsPage;","import Chart from \"react-apexcharts\";\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\nimport Card from \"react-bootstrap/Card\";\n\nconst CumulativeReturnChart = (props) => {\n\n    const chartOptions = {\n        options: {\n            chart: {\n                type: 'area',\n                toolbar: false,\n                id: \"basic-bar\",\n                zoom: {\n            enabled: false\n          }\n            },\n            xaxis: {\n                categories: [],\n                labels: {show: false},\n                axisBorder: {\n                    show: false,\n                    color: '#78909C',\n                    height: 1,\n                    width: '100%',\n                    offsetX: 0,\n                    offsetY: 0\n                },\n                axisTicks: {\n                    show: false,\n                    borderType: 'solid',\n                    color: '#78909C',\n                    height: 6,\n                    offsetX: 0,\n                    offsetY: 0\n                },\n            },\n            yaxis: [\n                {\n                    labels: {\n                        formatter: function (val) {\n                            return val.toFixed(0);\n                        }\n                    }\n                }\n            ],\n            dataLabels: {\n                enabled: false\n            },\n\n        },\n        stroke: {\n          curve: 'straight'\n        },\n        title: {\n            text: 'Cumulative Return',\n            align: 'left',\n            margin: 10,\n            offsetX: 0,\n            offsetY: 0,\n            floating: false,\n            style: {\n                fontSize: '14px',\n                fontWeight: 'bold',\n                // fontFamily: undefined,\n                color: '#263238'\n            },\n        },\n\n        series: [\n            {\n                type: 'area',\n                name: \"Cumulative Return\",\n                data: props.data,\n            }\n        ]\n    };\n\n    return (\n        <Card className=\"card\" style={{margin: '0px'}}>\n            <Card.Title className=\"card-header-first\">Cumulative Return</Card.Title>\n            <Card.Body style={{padding: '0px'}}>\n                <Row style={{height: '100%', width: '100%', margin: '0px'}}>\n                    <Col style={{height: '100%'}}>\n                        <div style={{padding: '0px', height: '100%'}}>\n                            <Chart\n                                options={chartOptions.options}\n                                series={chartOptions.series}\n                                type={'area'}\n                                width=\"100%\"\n                                height=\"100%\"\n                            />\n                        </div>\n                    </Col>\n                </Row>\n            </Card.Body>\n        </Card>\n    );\n};\n\nexport default CumulativeReturnChart;","import {useEffect, useState} from \"react\";\nimport axios from \"axios\";\nimport CumulativeReturnChart from \"../../../Robot/Charts/CumulativeReturn\";\n\nconst PortfolioNav = (props) => {\n    const [chartData, setChartData] = useState([]);\n\n    useEffect(() => {\n            axios.get(props.server + 'portfolios/nav/' + props.portfolio, {\n                params: {\n                    start_date: props.startDate,\n                    end_date: props.endDate\n                }\n            })\n                .then(response => response['data'].map(data => data))\n                .then(data => setChartData(data))\n                .catch((error) => {\n                    console.error('Error Message:', error);\n                });\n        }, [props]\n    );\n    return (\n        <CumulativeReturnChart data={chartData}/>\n    );\n};\nexport default PortfolioNav;","import React from \"react\";\n\nconst DateContext = React.createContext({\n\n});\n\nexport default DateContext;","import PortfolioDetails from \"./PortfolioDetails\";\nimport PortfolioDescription from \"./PortfolioDescreption\";\nimport CashHoldings from \"../PortfolioHoldings/CashHolding\";\nimport PortfolioNav from \"./PortfolioNav\";\n\n// Bootstrap\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport {useContext, useEffect, useState} from \"react\";\nimport axios from \"axios\";\n\n// Contexts\nimport DateContext from \"../../../../context/date-context\";\n\nconst PortfolioDashBoardPage = (props) => {\n    const startDate = useContext(DateContext)['startDate'];\n    const endDate = useContext(DateContext)['endDate'];\n    return (\n        <Row style={{width: '100%', height:'100%', margin:'0px'}}>\n            <Row style={{width: '50%', height: '400px', background:'red', margin:'0px'}}>\n                <Col>\n                    <PortfolioNav server={props.server} portfolio={props.portfolio} startDate={startDate} endDate={endDate}/>\n                </Col>\n            </Row>\n            <Row style={{width: '50%', height:'150px', background:'blue', margin:'0px'}}>\n                <Col>\n\n                </Col>\n                <Col>\n\n                </Col>\n            </Row>\n            <Row style={{width: '100%', height:'400px', background:'blue', margin:'0px'}}>\n\n            </Row>\n        </Row>\n    );\n};\n\nexport default PortfolioDashBoardPage;","const PortfolioSettingsPage = (props) => {\n    return (\n        <>\n            portfolio settings\n        </>\n    );\n};\n\nexport default PortfolioSettingsPage;","import Card from \"react-bootstrap/Card\";\n\nimport PortfolioBuy from \"../../PortfolioBuy\";\nimport {useEffect, useState} from \"react\";\nimport axios from \"axios\";\nimport Table from \"react-bootstrap/Table\";\nimport Form from \"react-bootstrap/Form\";\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nimport \"../../../PortfolioPage.css\"\nimport \"../../../MainCSS.css\"\n\nconst PortfolioTransactions = (props) => {\n     // Date variables\n    const date = new Date();\n    const firstDay = new Date(date.getFullYear(), date.getMonth(), 1);\n    const [startDate, setStartDate] = useState(firstDay.toISOString().substr(0,10));\n    const [endDate, setEndDate] = useState(date.toISOString().substr(0,10));\n\n    const [portTransData, setPortTransData] = useState([]);\n\n    const startDateHandler = (event) => {\n        setStartDate(event.target.value);\n    };\n    const endDateHandler = (event) => {\n        setEndDate(event.target.value);\n    };\n\n    useEffect(() => {\n            axios.get(props.server + 'portfolios/get_portfolio_transactions/' + props.portfolio)\n                .then(response => response['data'].map((data) =>\n                    <tr key={data[0]}>\n                        <td style={{fontSize: 12, verticalAlign:\"middle\"}}>{data[1]}</td>\n                        <td style={{fontSize: 12, verticalAlign:\"middle\"}}>{data[2]}</td>\n                        <td style={{fontSize: 12, verticalAlign:\"middle\"}}>{data[3]}</td>\n                        <td style={{fontSize: 12, verticalAlign:\"middle\"}}>{data[4]}</td>\n                        <td style={{fontSize: 12, verticalAlign:\"middle\"}}>{data[5]}</td>\n                        <td style={{fontSize: 12, verticalAlign:\"middle\"}}>{data[6]}</td>\n                        <td style={{fontSize: 12, verticalAlign:\"middle\"}}>{data[7]}</td>\n                        <td style={{fontSize: 12, verticalAlign:\"middle\"}}>{data[8]}</td>\n                    </tr>\n                ))\n                .then(data => setPortTransData(data))\n                .catch((error) => {\n                    console.error('Error Message:', error);\n                });\n        }, [props]\n    );\n\n    return (\n        <Card className=\"card\">\n            <Row style={{width: '100%', margin: '0px'}}>\n                <Col sm={2}>\n                    <Card.Title className=\"card-header-first\">Transactions</Card.Title>\n                </Col>\n                <Col sm={10} style={{display:'flex'}}>\n                    <Col>\n                        <Form.Group as={Row} style={{margin:'0px', padding:'5px'}}>\n                        <Form.Label className=\"form-label-first\" column sm={2}>\n                            From\n                        </Form.Label>\n                        <Col sm={10}>\n                            <Form.Control type=\"date\" onChange={startDateHandler}\n                                          defaultValue={firstDay.toISOString().substr(0, 10)}/>\n                        </Col>\n                    </Form.Group>\n                    </Col>\n                    <Col>\n                        <Form.Group as={Row} style={{margin:'0px', padding:'5px'}}>\n                        <Form.Label className=\"form-label-first\" column sm={2}>\n                            To\n                        </Form.Label>\n                        <Col sm={10}>\n                            <Form.Control type=\"date\" onChange={endDateHandler}\n                                          defaultValue={date.toISOString().substr(0, 10)}/>\n                        </Col>\n                    </Form.Group>\n                    </Col>\n                </Col>\n            </Row>\n            <div style={{height: '100%', overflowY: 'scroll', overflowX: 'hidden'}}>\n                <Table>\n                    <thead className=\"table-header-first\">\n                    <tr>\n                        <td className=\"table-header-row\">Portfolio</td>\n                        <td className=\"table-header-row\">Quantity</td>\n                        <td className=\"table-header-row\">Price</td>\n                        <td className=\"table-header-row\">Market Value</td>\n                        <td className=\"table-header-row\">Trade Date</td>\n                        <td className=\"table-header-row\">Instrument</td>\n                        <td className=\"table-header-row\">Instrument Type</td>\n                        <td className=\"table-header-row\">Source</td>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {portTransData}\n                    </tbody>\n                </Table>\n            </div>\n        </Card>\n    );\n};\n\nexport default PortfolioTransactions;","import PortfolioTransactions from \"./PortfolioTransactions\";\n\nconst PortfolioTransactionsPage = (props) => {\n    return (\n        <>\n            <PortfolioTransactions portfolio={props.portfolio} server={props.server}/>\n        </>\n    );\n};\n\nexport default PortfolioTransactionsPage;","import Modal from \"react-bootstrap/Modal\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport axios from \"axios\";\nimport {useState} from \"react\";\n\nconst PortfolioDataImport = (props) => {\n    const [file, setFile] = useState();\n    const [array, setArray] = useState([]);\n    const [importStream, setImportStream] = useState('NAV');\n\n    const handleOnChange = (e) => {\n        setFile(e.target.files[0]);\n\n    };\n    const fileReader = new FileReader();\n    const handleClose = () => {\n        props.hide();\n    };\n    const csvFileToArray = string => {\n        const csvHeader = string.slice(0, string.indexOf(\"\\n\")).split(\",\");\n        const csvRows = string.slice(string.indexOf(\"\\n\") + 1).split(\"\\n\");\n\n        const array = csvRows.map(i => {\n            const values = i.split(\",\");\n            const obj = csvHeader.reduce((object, header, index) => {\n                object[header] = values[index];\n                return object;\n            }, {});\n            return obj;\n        });\n        setArray(array);\n    };\n    const importStreamHandler = (event) => {\n        setImportStream(event.target.value)\n    };\n    const submitHandler = (event) => {\n        event.preventDefault();\n        if (file) {\n            fileReader.onload = function (event) {\n                const csvOutput = event.target.result;\n                csvFileToArray(csvOutput);\n            };\n\n            fileReader.readAsText(file);\n        }\n        axios.post(props.server + 'portfolios/import/' + importStream, {\n            data: array,\n        })\n            .then(function (response) {\n                console.log(response)\n            })\n            .catch((error) => {\n                console.error('Error Message:', error);\n            });\n    };\n    const headerKeys = Object.keys(Object.assign({}, ...array));\n    console.log(array)\n    return (\n        <>\n            <Modal show={props.show} onHide={handleClose} size=\"lg\">\n                <Modal.Header closeButton>\n                    <Modal.Title>Data Import</Modal.Title>\n                </Modal.Header>\n                <Modal.Body style={{height:'500px'}}>\n                    <Form onSubmit={submitHandler} style={{width: '100%'}}>\n                        <Form.Control onChange={importStreamHandler} as=\"select\">\n                            <option value={'NAV'}>NAV</option>\n                            <option value={'Holdings'}>Holdings</option>\n                        </Form.Control>\n                        <Form.Group>\n                            <Form.Control onChange={handleOnChange} type={'file'} accept={'.csv'} placeholder=\"File\"\n                                          required/>\n                        </Form.Group>\n                    </Form>\n                    <div style={{overflowY: 'scroll', overflowX: 'hidden', height: '90%'}}>\n                        <table style={{width:'100%'}}>\n                        <thead>\n                        <tr key={\"header\"}>\n                            {headerKeys.map((key) => (\n                                <th>{key}</th>\n                            ))}\n                        </tr>\n                        </thead>\n\n                        <tbody style={{height: '100%', overflow: 'scroll'}}>\n                        {array.map((item) => (\n                            <tr key={item.id}>\n                                {Object.values(item).map((val) => (\n                                    <td>{val}</td>\n                                ))}\n                            </tr>\n                        ))}\n                        </tbody>\n                    </table>\n                    </div>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={handleClose}>\n                        Close\n                    </Button>\n                    <Button variant=\"primary\" onClick={submitHandler}>\n                        Save\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </>\n    )\n};\nexport default PortfolioDataImport;","import {useContext, useEffect, useState} from \"react\";\nimport {Route, Switch, Link} from \"react-router-dom\";\n\nimport axios from \"axios\";\n\nimport NewPortfolioForm from \"./PortfolioPage/NewPortfolioForm\";\n\n// Sidebar\nimport { ProSidebar, Menu, MenuItem, SubMenu } from 'react-pro-sidebar';\nimport 'react-pro-sidebar/dist/css/styles.css';\n\n// Calculations\nimport PositionCalculation from \"./PortfolioPage/Calculations/PositionCalculation\";\nimport CashHoldingCalculation from \"./PortfolioPage/Calculations/CashHoldingCalc\";\n\n// Bootstrap\nimport Col from 'react-bootstrap/Col';\nimport Container from 'react-bootstrap/Container'\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport Row from 'react-bootstrap/Row';\nimport OptionLoader from \"../components/Options\";\n\n// CSS\nimport \"./PortfolioPage.css\"\nimport PortfolioBuy from \"./PortfolioPage/PortfolioBuy\";\nimport NewPortCashFlow from \"./PortfolioPage/NewPortCashFlow\";\n\n// Contexts\nimport RobotContext from \"../context/robot-context\";\nimport NewBrokerAccount from \"../components/NewBrokerAccount\";\nimport RiskPage from \"./RiskPage\";\nimport ServerContext from \"../context/server-context\";\nimport EnvContext from \"../context/env-context\";\nimport PortfolioContext from \"../context/portfolio-context\";\n\n\n// SubPages\nimport PortfolioRiskPage from \"./PortfolioPage/SubPages/PortfolioRisk/PortfolioRiskPage\";\nimport PortfolioHoldingsPage from \"./PortfolioPage/SubPages/PortfolioHoldings/PortfolioHoldingsPage\";\nimport PortfolioDashBoardPage from \"./PortfolioPage/SubPages/PortfolioDashboard/PortfolioDashBoardPage\";\nimport PortfolioSettingsPage from \"./PortfolioPage/SubPages/PortfolioSettings/PortfolioSettingsPage\";\nimport PortfolioTransactionsPage from \"./PortfolioPage/SubPages/PortfolioTransactions/PortfolioTransactionsPage\";\nimport PortfolioDataImport from \"./PortfolioPage/SubPages/PortfolioImport/PortfolioDataImport\";\n\nconst PortfolioPage = (props) => {\n    // Date variables\n    const date = new Date();\n    const firstDay = new Date(date.getFullYear(), date.getMonth(), 1);\n    const defaultRobots = useContext(RobotContext)['robots'];\n    const server = useContext(ServerContext)['server'];\n    const env = useContext(EnvContext)['environment'];\n    const portfolios = useContext(PortfolioContext)['portfolioData'];\n    const [portfolio, setPortfolio] = useState(portfolios[0]['portfolio_code']);\n    const [startDate, setStartDate] = useState(firstDay.toISOString().substr(0,10));\n    const [endDate, setEndDate] = useState(date.toISOString().substr(0,10));\n    const portfolioOptions = portfolios.map((record) =>\n        <option key={record['id']} value={record['portfolio_code']}>{record['portfolio_name']}</option>)\n    const portSelectHandler = (event) => {\n        setPortfolio(event.target.value);\n    };\n    const portSelect = (port) => {\n        setPortfolio(port);\n    };\n\n    // New portfolio form\n    const [showNewPortfolio, setShowNewPortfolio] = useState(false);\n    const showNewRobotForm = () => {\n        setShowNewPortfolio(true);\n    };\n    const hideNewPortfolio = () => {\n        setShowNewPortfolio(false);\n    };\n\n    // New robot trade form\n    const [showNewRobotTrade, setNewRobotTrade] = useState(false);\n    const showNewRobotTradeForm = () => {\n        setNewRobotTrade(true);\n    };\n    const hideNewRobotTrade = () => {\n        setNewRobotTrade(false);\n    };\n\n    // Import Modal\n    const [showImportModal, setShowImportModal] = useState(false);\n    const showImport = () => {\n        setShowImportModal(true);\n    };\n    const hideImportModal = () => {\n        setShowImportModal(false);\n    };\n    // New portfolio cash flow\n    const [showNewPortCashFlow, setNewPortCashFlow] = useState(false);\n    const showNewPortCashFlowForm = () => {\n        setNewPortCashFlow(true);\n    };\n    const hideNewPortCashFlow = () => {\n        setNewPortCashFlow(false);\n    };\n\n    // Position calculation\n    const [showPosCalc, setPosCalc] = useState(false);\n    const showPosCalcForm = () => {\n        setPosCalc(true);\n    };\n    const hidePosCalcForm = () => {\n        setPosCalc(false);\n    };\n\n    // Cash flow calculation\n    const [showCashCalc, setCashCalc] = useState(false);\n    const showCashCalcForm = () => {\n        setCashCalc(true);\n    };\n    const hideCashCalcForm = () => {\n        setCashCalc(false);\n    };\n    return (\n        <Container style={{background: '#FBFAFA', width: \"100%\", height: window.innerHeight, padding: '0px'}} fluid>\n            <Row style={{height: '100%', margin:'0px'}}>\n                <ProSidebar>\n                    <MenuItem style={{padding:'5px'}} ><Form.Control onChange={portSelectHandler} as=\"select\">\n                        {portfolioOptions}\n                    </Form.Control>\n                    </MenuItem>\n                    <Menu iconShape=\"square\">\n                        <MenuItem onClick={showNewRobotForm}>New Portfolio</MenuItem>\n                        <MenuItem>Dashboard\n                            <Link to=\"/portfolio/dashboard\"/>\n                        </MenuItem>\n                        <SubMenu title=\"Cash Operations\">\n                            <MenuItem onClick={showNewPortCashFlowForm}>Funding</MenuItem>\n                            <MenuItem>Withdraw</MenuItem>\n                        </SubMenu>\n                        <SubMenu title=\"Trade\">\n                            <MenuItem onClick={showNewRobotTradeForm}>Robot</MenuItem>\n                            <MenuItem>Security</MenuItem>\n                        </SubMenu>\n                        <SubMenu title=\"Calculations\">\n                            <MenuItem onClick={showCashCalcForm}>Cash Holdings</MenuItem>\n                            <MenuItem onClick={showPosCalcForm}>Positions</MenuItem>\n                            <MenuItem>Holdings</MenuItem>\n                            <MenuItem>Return</MenuItem>\n                        </SubMenu>\n                        <MenuItem>Holdings\n                            <Link to=\"/portfolio/holdings\"/>\n                        </MenuItem>\n                        <MenuItem>Transactions\n                            <Link to=\"/portfolio/transactions\"/>\n                        </MenuItem>\n                        <MenuItem>Risk\n                            <Link to=\"/portfolio/risk\"/>\n                        </MenuItem>\n                        <MenuItem>Return\n                            <Link to=\"/portfolio/return\"/>\n                        </MenuItem>\n                        <MenuItem>Settings\n                            <Link to=\"/portfolio/settings\"/>\n                        </MenuItem>\n                        <MenuItem onClick={showImport}>Import</MenuItem>\n                    </Menu>\n                    </ProSidebar>;\n                <Col style={{width: '50%'}}>\n                    <Row style={{\n                        padding: '15px',\n                        height: window.innerHeight,\n                        width: '100%',\n                        margin: '0px'\n                    }}>\n                        <Switch>\n                            <Route path=\"/portfolio/dashboard\">\n                                <PortfolioDashBoardPage portfolio={portfolio} server={server} default={portfolios[0]}/>\n                            </Route>\n                            <Route path=\"/portfolio/holdings\">\n                                <PortfolioHoldingsPage portfolio={portfolio} server={server}/>\n                            </Route>\n                            <Route path=\"/portfolio/transactions\">\n                                <PortfolioTransactionsPage portfolio={portfolio} server={server}/>\n                            </Route>\n                            <Route path=\"/portfolio/risk\">\n                                <PortfolioRiskPage portfolio={portfolio} server={server}/>\n                            </Route>\n                            <Route path=\"/portfolio/return\">\n\n                            </Route>\n                            <Route path=\"/portfolio/settings\">\n                                <PortfolioSettingsPage/>\n                            </Route>\n                        </Switch>\n                    </Row>\n                </Col>\n            </Row>\n\n            {/*<Row>*/}\n            {/*    <Col>*/}\n            {/*        <Row style={{height: '500px', padding: '5px'}}>*/}\n            {/*            <Col style={{height: '100%'}} sm={4}>*/}\n            {/*                <PortfolioCashFlow portfolio={portfolio} server={server} start_date={startDate}*/}\n            {/*                                   end_date={endDate}/>*/}\n            {/*            </Col>*/}\n            {/*        </Row>*/}\n            {/*    </Col>*/}\n            {/*</Row>*/}\n\n            // Modals\n            <NewPortfolioForm show={showNewPortfolio} hide={hideNewPortfolio} server={server}/>\n            <PortfolioBuy show={showNewRobotTrade} hide={hideNewRobotTrade} portfolio={portfolio} server={server} env={env}/>\n            <NewPortCashFlow show={showNewPortCashFlow} hide={hideNewPortCashFlow} portfolio={portfolio} server={server}/>\n            <PositionCalculation show={showPosCalc} hide={hidePosCalcForm} server={server} portfolio={portfolio}/>\n            <CashHoldingCalculation show={showCashCalc} hide={hideCashCalcForm} server={server} portfolio={portfolio}/>\n            <PortfolioDataImport show={showImportModal} hide={hideImportModal} server={server}/>\n        </Container>\n    );\n};\n\nexport default PortfolioPage;","import SliderWidget from \"../../components/SliderWidget\";\nimport Button from \"react-bootstrap/Button\";\nimport axios from \"axios\";\n\nimport PriceParagraph from \"./PriceParagraph\";\n\nconst TradeTableRow = (props) => {\n\n    // const newWebSocket = new WebSocket('ws://127.0.0.1:8000/trade/ws/')\n    // newWebSocket.send('XAG_USD')\n\n    // console.log(\"New trade\", newWebSocket)\n\n    const CloseTrade = () => {\n        axios.post(props.server + 'trade_page/close_trade/', {\n            broker_id: props.broker_id,\n            robot: props.robot,\n            trd_id: props.id,\n        })\n            .then(response => alert(response['data']))\n            .catch((error) => {\n                console.error('Error Message:', error);\n            });\n    };\n\n    return (\n        <tr>\n            <td style={{fontSize: 12, verticalAlign:\"middle\" }}>{props.id}</td>\n            <td style={{fontSize: 12, verticalAlign:\"middle\" }}>{props.broker_id}</td>\n            <td style={{fontSize: 12, verticalAlign:\"middle\"}}>{props.security}</td>\n            <td style={{fontSize: 12, verticalAlign:\"middle\"}}>{props.robot}</td>\n            <td style={{fontSize: 12, verticalAlign:\"middle\"}}>{props.quantity}</td>\n            <td style={{fontSize: 12, verticalAlign:\"middle\"}}>{props.price}</td>\n            {/*<td><PriceParagraph socketConnection={newWebSocket}/></td>*/}\n            <td><Button onClick={CloseTrade}>Close</Button></td>\n        </tr>\n    );\n};\n\nexport default TradeTableRow;","import {useContext, useEffect, useState} from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport Table from \"react-bootstrap/Table\";\nimport Row from \"react-bootstrap/Row\";\nimport TradeTableRow from \"./TradeTableRow\";\n\n\nconst TradeTableData = (props) => {\n\n    const [tradeData, setTradeData] = useState([])\n\n    // Fetching robot risk data from database\n    useEffect(() => {\n            fetch(props.server + 'trade_page/get_open_trades/' + props.env)\n                .then(response => response.json())\n                .then(data => setTradeData(data))\n                .catch((error) => {\n                    console.error('Error Message:', error);\n                });\n        }, [props]\n    );\n\n    const tradeDataRow = tradeData.map((record)=>\n        <TradeTableRow\n            server={props.server}\n            key={record['id']}\n            id={record['id']}\n            broker_id={record['broker_id']}\n            security={record['security']}\n            robot={record['robot']}\n            quantity={record['quantity']}\n            price={record['open_price']}/>)\n\n    return (\n        <Card style={{width: '100%'}}>\n            <Table>\n                <thead style={{fontSize: 12}}>\n                <tr>\n                    <th style={{verticalAlign: \"middle\"}}>Platform ID</th>\n                    <th style={{verticalAlign: \"middle\"}}>Broker ID</th>\n                    <th style={{verticalAlign: \"middle\"}}>Security</th>\n                    <th style={{verticalAlign: \"middle\"}}>Robot</th>\n                    <th style={{verticalAlign: \"middle\"}}>Quantity</th>\n                    <th style={{verticalAlign: \"middle\"}}>Price</th>\n                    <th style={{verticalAlign: \"middle\"}}></th>\n                </tr>\n                </thead>\n\n                <tbody style={{height: '100%', overflow: 'scroll'}}>\n                {tradeDataRow}\n                </tbody>\n            </Table>\n\n        </Card>\n    );\n};\n\nexport default TradeTableData;","import {useState} from \"react\";\nimport Card from \"react-bootstrap/Card\";\n\nconst TradeExecutor = (props) => {\n    const [robot, setRobot] = useState('');\n    const [side, setSide] = useState()\n    return (\n        <Card style={{}} className=\"card\">\n            <Card.Title className=\"card-header-first\">Robot Trade Execution</Card.Title>\n            <div style={{height: '200px', width:'200px'}}>\n\n            </div>\n        </Card>\n    );\n};\n\nexport default TradeExecutor","// React Bootstrap\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button'\n\nimport TradeTableData from \"./TradePage/TradeTableData\";\nimport PriceParagraph from \"./TradePage/PriceParagraph\";\nimport TradeExecutor from \"./TradePage/TradeExecutor\";\n\nimport {useContext, useState} from \"react\";\n\n// Contexts\nimport EnvContext from \"../context/env-context\";\nimport ServerContext from \"../context/server-context\";\nimport axios from \"axios\";\nimport Card from \"react-bootstrap/Card\";\nimport Table from \"react-bootstrap/Table\";\n\nconst TradePage = () => {\n    const server = useContext(ServerContext)['server'];\n    const env = useContext(EnvContext)['environment'];\n\n    // This part connects a websocket with the back end from the front end\n    // const newWebSocket = new WebSocket('http://127.0.0.1:8000/trade/price_stream/')\n    //\n    // console.log(newWebSocket)\n    //\n    // const testSocket = () => {\n    //     // This code sends data to the websocket form front end\n    //     newWebSocket.send(\"start\")\n    //     console.log('Streaming request is sent from front end to back end.')\n    // };\n    //\n    // const closeSocket = () => {\n    //     // This code closes the websocket connection with the back end\n    //     newWebSocket.send(\"stop\")\n    //     // newWebSocket.close()\n    //     console.log('Streaming is stopped')\n    // };\n\n    return (\n        <Container className={'border'}\n                   style={{background: '#FBFAFA', width: \"100%\", height: window.innerHeight, padding: '20px'}} fluid>\n            <Row style={{height: '400px'}}>\n                <Col style={{height: '100%'}}>\n                    <Card style={{height: '100%'}} className=\"card\">\n                        <Card.Title className=\"card-header-first\">Portfolio Trade</Card.Title>\n                        <div style={{height: '500px', overflowY: 'scroll', overflowX: 'hidden'}}>\n\n                        </div>\n                    </Card>\n                </Col>\n                <Col style={{height: '100%'}}>\n                    <Card style={{height: '100%'}} className=\"card\">\n                        <Card.Title className=\"card-header-first\">Robot Trade</Card.Title>\n                        <div style={{height: '500px', overflowY: 'scroll', overflowX: 'hidden'}}>\n                            <TradeExecutor/>\n                        </div>\n                    </Card>\n                </Col>\n            </Row>\n            <br/>\n            <Row style={{height: '500px'}}>\n                <TradeTableData env={env} server={server}/>\n            </Row>\n        </Container>\n    );\n};\n\nexport default TradePage;","import Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport {Navbar} from \"react-bootstrap\";\nimport {useEffect, useState} from \"react\";\nimport axios from \"axios\";\nimport {store} from \"react-notifications-component\";\nimport {forEach} from \"react-bootstrap/ElementChildren\";\n\n// Icons\nimport { BsGraphDown, BsBell, BsCpu, BsExclamationTriangle} from 'react-icons/bs';\n\nconst Notifications = (props) => {\n    const startDate = new Date().toISOString().substr(0,10);\n    const [date, setDate] = useState(startDate)\n    const [messages, setMessages] = useState([]);\n    const tradeMessages = []\n    const processMessages = []\n\n    messages.forEach(function (item) {\n        if (item['msg_type'] === 'Process') {\n            processMessages.push(item)\n        }\n        if (item['msg_type'] === 'Trade') {\n            tradeMessages.push(item)\n        }\n    })\n\n    // if (tradeMessages.length > 0){\n    //     document.getElementById('notTrades').style.backgroundColor='red'\n    // }\n\n    // Fetch the data periodically\n    useEffect(() => {\n        const interval = setInterval(() => {\n            axios.get(props.server + 'home/system_messages/not_verified', {\n                params: {\n                    date: date,\n                }\n            })\n                .then(response => setMessages(response['data']))\n                .catch((error) => {\n                    console.error('Error Message:', error);\n                });\n        }, 1000*900);\n        return () => clearInterval(interval);\n    }, [])\n\n    const removeMsg = (msg) => {\n        axios.get(props.server + 'home/verify_sys_msg/' + msg)\n            .then(response => console.log(response['data']))\n            .catch((error) => {\n                console.error('Error Message:', error);\n            });\n    };\n\n    const procNotHandler = () => {\n        processMessages.forEach(function (item) {\n            store.addNotification({\n                title: item['msg_type'] + ' - ' + item['msg_sub_type'],\n                message: item['msg'],\n                type: \"success\",\n                insert: \"top\",\n                container: \"top-right\",\n                animationIn: [\"animate__animated\", \"animate__fadeIn\"],\n                animationOut: [\"animate__animated\", \"animate__fadeOut\"],\n                onRemoval: () => {\n                    removeMsg(item['id']);\n                }\n            })\n        })\n    };\n\n    const tradeNotHandler = () => {\n        tradeMessages.forEach(function (item) {\n            store.addNotification({\n                title: item['msg_type'] + ' - ' + item['msg_sub_type'],\n                message: item['msg'],\n                type: \"success\",\n                insert: \"top\",\n                container: \"top-right\",\n                animationIn: [\"animate__animated\", \"animate__fadeIn\"],\n                animationOut: [\"animate__animated\", \"animate__fadeOut\"],\n                onRemoval: () => {\n                    removeMsg(item['id']);\n\n                }\n            })\n        })\n    };\n\n    return (\n        <>\n            <Form style={{margin: '5px'}}>\n                <Button className=\"rounded-circle block-example border border-light\" id={'notError'} style={{background: '#49A75D', border:''}}>\n                    <BsExclamationTriangle style={{}}/>\n                </Button>\n            </Form>\n            <Form style={{margin: '5px'}}>\n                <Button className=\"rounded-circle block-example border border-light\" id={'notRisk'} style={{background: '#49A75D'}}>\n                    <BsGraphDown />\n                </Button>\n            </Form>\n            <Form onClick={procNotHandler} style={{margin: '5px'}}>\n                <Button className=\"rounded-circle block-example border border-light\" id={'notProcess'} style={{background: '#49A75D'}}>\n                    <BsCpu style={{}}/>\n                </Button>\n            </Form>\n            <Form style={{margin: '5px'}}>\n                <Button className=\"rounded-circle block-example border border-light\" onClick={tradeNotHandler} id={'notTrades'} style={{background: '#49A75D'}}>\n                    <BsBell style={{}}/>\n                </Button>\n            </Form>\n        </>\n    );\n};\n\nexport default Notifications","import Col from \"react-bootstrap/Col\";\nimport Form from \"react-bootstrap/Form\";\nimport Row from \"react-bootstrap/Row\";\nimport Container from \"react-bootstrap/Container\";\nimport DateContext from \"../../context/date-context\";\nimport {useContext} from \"react\";\n\nconst DateSelectorRobotPage = (props) => {\n    const startDate = useContext(DateContext)['startDate']\n    const endDate = useContext(DateContext)['endDate']\n    const setStartDate = useContext(DateContext)['saveStartDate']\n    const setEndDate = useContext(DateContext)['saveEndDate']\n    const startDateHandler = (event) => {\n        setStartDate(event.target.value);\n    };\n    const endDateHandler = (event) => {\n        if (event.target.value < startDate) {\n            alert('End date can not be less then start date!');\n        }else {\n            setEndDate(event.target.value);\n        };\n    };\n    return (\n        <Row style={{height: '60px', width: '100%', padding: '5px', margin: '0px'}}>\n            <Col style={{height: '100%', width: '50%'}}>\n                <Form.Group as={Row}>\n                    <Form.Label size=\"sm\" column sm={2}>\n                        From\n                    </Form.Label>\n                    <Col sm={10}>\n                        <Form.Control size=\"sm\" type=\"date\" onChange={startDateHandler} defaultValue={startDate}/>\n                    </Col>\n                </Form.Group>\n            </Col>\n            <Col style={{height: '100%', width: '50%'}}>\n                <Form.Group as={Row}>\n                    <Form.Label className=\"form-label-first\" column sm={2}>\n                        To\n                    </Form.Label>\n                    <Col sm={10}>\n                        <Form.Control size=\"sm\" type=\"date\" onChange={endDateHandler} defaultValue={endDate}/>\n                    </Col>\n                </Form.Group>\n            </Col>\n        </Row>\n    );\n};\n\nexport default DateSelectorRobotPage;","import { Navbar, Nav, Container } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport Button from 'react-bootstrap/Button'\nimport Form from 'react-bootstrap/Form'\nimport FormControl from 'react-bootstrap/FormControl'\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport NavDropdown from 'react-bootstrap/NavDropdown';\nimport { Link } from 'react-router-dom'\n\nimport {useContext, useEffect, useState} from \"react\";\n\nimport NewBrokerAccount from \"./NewBrokerAccount\";\nimport Notifications from \"./Notifications\";\nimport DateSelectorRobotPage from \"../Pages/Robot/DateSelectorRobotPage\";\nimport ServerContext from \"../context/server-context\";\nimport {store} from \"react-notifications-component\";\nimport axios from \"axios\";\nimport DateContext from \"../context/date-context\";\n\nconst Navigation = (props) => {\n    const startDate = useContext(DateContext)['startDate']\n    const endDate = useContext(DateContext)['endDate']\n    const setStartDate = useContext(DateContext)['saveStartDate']\n    const setEndDate = useContext(DateContext)['saveEndDate']\n    const startDateHandler = (event) => {\n        setStartDate(event.target.value);\n    };\n    const endDateHandler = (event) => {\n        if (event.target.value < startDate) {\n            alert('End date can not be less then start date!');\n        }else {\n            setEndDate(event.target.value);\n        };\n    };\n    const server = useContext(ServerContext)['server'];\n    const [showNewAccount, setShowNewAccount] = useState(false);\n    const envChange = (envValue) => {\n        props.onEnvChange(envValue);\n    };\n    // New account handlers\n    const newAccountHandler = () => {\n        setShowNewAccount(true);\n    };\n    const hideNewAccount = () => {\n        setShowNewAccount(false);\n    };\n    return (\n            <Navbar bg=\"dark\" variant=\"dark\">\n                <Navbar.Brand href=\"react\">FFM SYSTEM</Navbar.Brand>\n                <Nav className=\"mr-auto\">\n                    <Nav.Link as={Link} to={'/home'}>Home</Nav.Link>\n                    <Nav.Link as={Link} to={'/portfolio'}>Portfolio</Nav.Link>\n                    <Nav.Link as={Link} to={'/robot/dashboard'}>Robot</Nav.Link>\n                    <Nav.Link as={Link} to={'/risk'}>Risk</Nav.Link>\n                    <Nav.Link as={Link} to={'/instruments'}>Instrument</Nav.Link>\n                    <Nav.Link as={Link} to={'/trade'}>Trade</Nav.Link>\n                    <NavDropdown title=\"Broker Accounts\">\n                        <NavDropdown.Item onSelect={newAccountHandler}>New</NavDropdown.Item>\n                        <NavDropdown.Item>Update</NavDropdown.Item>\n                        <NavDropdown.Item>Delete</NavDropdown.Item>\n                    </NavDropdown>\n                    <NavDropdown title=\"Period\">\n                        <Form.Label>From</Form.Label>\n                        <FormControl\n                            type=\"date\"\n                            className=\"me-2\"\n                            aria-label=\"Search\"\n                            defaultValue={startDate}\n                            onChange={startDateHandler}\n                        />\n                        <Form.Label>To</Form.Label>\n                        <FormControl\n                            type=\"date\"\n                            className=\"me-2\"\n                            aria-label=\"Search\"\n                            defaultValue={endDate}\n                            onChange={endDateHandler}\n                        />\n                    </NavDropdown>\n                </Nav>\n                {/*<DateSelectorRobotPage/>*/}\n                <Notifications server={server}/>\n                {/*<Form inline style={{margin: '5px'}}>*/}\n                {/*    <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\"/>*/}\n                {/*    <Button variant=\"outline-info\">Search</Button>*/}\n                {/*</Form>*/}\n                <Nav.Link href=\"#\" disabled>\n                    Environment\n                </Nav.Link>\n                <Dropdown onSelect={envChange} style={{margin: '5px'}}>\n                    <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\n                        {props.env}\n                    </Dropdown.Toggle>\n                    <Dropdown.Menu>\n                        <Dropdown.Item eventKey=\"live\">Live</Dropdown.Item>\n                        <Dropdown.Item eventKey=\"demo\">Demo</Dropdown.Item>\n                    </Dropdown.Menu>\n                </Dropdown>\n                <NewBrokerAccount show={showNewAccount} hide={hideNewAccount} server={server}/>\n            </Navbar>\n    );\n};\n\nexport default Navigation;","import Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport {useEffect, useState, useRef} from \"react\";\nimport axios from \"axios\";\nimport OptionLoader from \"../../components/Options\";\nimport Modal from \"react-bootstrap/Modal\";\n\nconst NewRobotForm = (props) => {\n    const [robotName, setRobotName] = useState('');\n    const [strategy, setStrategy] = useState('');\n    const [broker, setBroker] = useState('oanda');\n    const [env, setEnv] = useState('live');\n    const [account, setAccount] = useState('');\n    const [instrument, setInstrument] = useState('');\n\n    console.log(account);\n    console.log(instrument)\n\n    const handleClose = () => {\n        props.hide();\n    };\n\n    const accountParams = {\n        'broker': broker,\n        'env': env,\n    };\n\n    const instrumentParams = {\n        'broker': broker,\n    };\n\n    const robotNameChangeHandler = (event) => {\n        setRobotName(event.target.value)\n    };\n\n    const robotStrategyHandler = (event) => {\n        setStrategy(event.target.value)\n    };\n\n    const envHandler = (event) => {\n        setEnv(event.target.value);\n    };\n\n    const instHandler = (event) => {\n        setInstrument(event.target.value);\n    };\n\n    const brokerHandler = (event) => {\n        setBroker(event.target.value);\n    };\n\n    const accountHandler = (event) => {\n        setAccount(event.target.value);\n    };\n\n    const submitHandler = (event) => {\n        event.preventDefault();\n\n        axios.post(props.server + 'robots/new_robot/', {\n            robot_name: robotName,\n            strategy: strategy,\n            security: instrument,\n            broker: broker,\n            env: env,\n            account: account,\n        })\n                .then(response => console.log(response))\n                .catch((error) => {\n                    console.error('Error Message:', error);\n                });\n        props.hide();\n    };\n\n    return (\n        <>\n            <Modal show={props.show} onHide={handleClose} animation={false}>\n                <Modal.Header closeButton>\n                    <Modal.Title>New Robot</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <Form onSubmit={submitHandler} style={{width: '100%'}}>\n                        <Form.Group>\n                            <Form.Label>Robot Name</Form.Label>\n                            <Form.Control onChange={robotNameChangeHandler} type=\"text\" placeholder=\"Robot Name\"\n                                          maxLength={20}/>\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>Strategy</Form.Label>\n                            <Form.Control onChange={robotStrategyHandler} as=\"select\">\n                                <option value={'Initiative'}>Initiative</option>\n                                <option value={'Responsive'}>Responsive</option>\n                                <option value={'Correction'}>Correction</option>\n                            </Form.Control>\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>Broker</Form.Label>\n                            <Form.Control onChange={brokerHandler} as=\"select\">\n                                <option>oanda</option>\n                                <option>Fix</option>\n                            </Form.Control>\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>Environment</Form.Label>\n                            <Form.Control onChange={envHandler} as=\"select\">\n                                <option value={'live'}>Live</option>\n                                <option value={'demo'}>Demo</option>\n                            </Form.Control>\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>Instruments</Form.Label>\n                            <Form.Control onChange={instHandler} as=\"select\">\n                                <OptionLoader\n                                    url={props.server + 'instruments/get_instruments/'}\n                                    params={instrumentParams}\n                                    code={'instrument_name'}\n                                    value={'instrument_name'}\n                                />\n                            </Form.Control>\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>Account Number</Form.Label>\n                            <Form.Control onChange={accountHandler} as=\"select\">\n                                <OptionLoader\n                                    url={props.server + 'accounts/get_accounts_data/'}\n                                    params={accountParams}\n                                    code={'account_number'}\n                                    value={'account_number'}\n                                />\n                            </Form.Control>\n                        </Form.Group>\n                    </Form>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={handleClose}>\n                        Close\n                    </Button>\n                    <Button variant=\"primary\" onClick={submitHandler}>\n                        Save\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </>\n    );\n};\n\nexport default NewRobotForm;","import {Card} from \"react-bootstrap\";\nimport DateSelectorRobotPage from \"../DateSelectorRobotPage\";\nimport {useContext, useState} from \"react\";\nimport axios from \"axios\";\n\nimport Button from \"react-bootstrap/Button\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Col from 'react-bootstrap/Col'\nimport Row from 'react-bootstrap/Row';\nimport Form from \"react-bootstrap/Form\";\nimport DateContext from \"../../../context/date-context\";\n\nconst RobotBalanceCalculation = (props) => {\n    const startDate = useContext(DateContext)['startDate']\n    const endDate = useContext(DateContext)['endDate']\n    const [loadState, setLoadState] = useState(false);\n    const handleClose = () => {\n        props.hide();\n    };\n    const submitHandler = (event) => {\n        event.preventDefault();\n\n        setLoadState(true);\n\n        axios.post(props.server + 'robots/calculate_robot_balance/', {\n            process: 'Balance',\n            robot: props.robot,\n            start_date: startDate,\n            end_date: endDate,\n        })\n            .then(response => setLoadState(false))\n            .catch((error) => {\n                console.error('Error Message:', error);\n            });\n    };\n    return (\n        <Modal show={props.show} onHide={handleClose} animation={false}>\n            <Modal.Header closeButton>\n                <Modal.Title>Balance - {props.robot}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body style={{width: '100%', height: '100px'}}>\n                <DateSelectorRobotPage>\n                    {/*<h2>Calculating ...</h2>*/}\n                </DateSelectorRobotPage>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"primary\" onClick={submitHandler}>\n                    Calculate\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n};\n\nexport default RobotBalanceCalculation;","import Card from \"react-bootstrap/Card\";\n\nimport \"../MainCSS.css\"\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\nimport Form from \"react-bootstrap/Form\";\nimport {useEffect, useState} from \"react\";\nimport axios from \"axios\";\n\nconst RobotNav = (props) => {\n    const [robotsData, setRobotsData] = useState(props.robots);\n\n    const robotSelectHandler = (event) => {\n        props.robotChange(event.target.value);\n    };\n\n    useEffect(() => {\n            axios.get(props.server + 'robots/get_robots/' + props.env)\n                .then(response => setRobotsData(response['data']))\n                .catch((error) => {\n                    console.error('Error Message:', error);\n                });\n        }, [props]\n    );\n\n    const robotsOptions = robotsData.map((record) =>\n        <option key={record['id']} value={record['name']}>{record['name']}</option>);\n\n    return (\n            <Form.Group as={Row} >\n                <Col sm={10}>\n                    <Form.Control onChange={robotSelectHandler} as=\"select\" style={{margin:'0px', width:'100%'}}>\n                        {robotsOptions}\n                    </Form.Control>\n                </Col>\n            </Form.Group>\n    );\n};\n\nexport default RobotNav;","import Modal from \"react-bootstrap/Modal\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport axios from \"axios\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport {useState} from \"react\";\nimport ExpandMoreIcon from \"@mui/icons-material/ExpandMore\";\nimport ChevronRightIcon from \"@mui/icons-material/ChevronRight\";\nimport TreeView from \"@mui/lab/TreeView\";\nimport TreeItem from \"@mui/lab/TreeItem\";\nimport DateContext from \"../../../context/date-context\";\nconst RobotPricingForm = (props) => {\n    const date = new Date();\n    const firstDay = new Date(date.getFullYear(), date.getMonth(), 1);\n    const [startDate, setStartDate] = useState(firstDay.toISOString().substr(0,10));\n    const [endDate, setEndDate] = useState(date.toISOString().substr(0,10));\n    const [robot, setRobot] = useState(props.robot);\n    const [response, setResponse] = useState([]);\n    const treeData = response.map(function (data, index) {\n        let treeNodes = data['response'].map(item => <TreeItem label={item['date'] + \" \" + item['msg']}></TreeItem>);\n        return <TreeItem nodeId={index.toString()} label={data['robot']}>\n            {treeNodes}\n        </TreeItem>\n    });\n    const handleClose = () => {\n        props.hide();\n        setRobot(props.robot)\n    };\n\n    const startDateHandler = (event) => {\n        setStartDate(event.target.value);\n    };\n\n    const endDateHandler = (event) => {\n        setEndDate(event.target.value);\n    };\n\n    const changeRobot = (event) => {\n        if (event.target.checked){\n            setRobot('ALL');\n        }else {\n            setRobot(props.robot);\n        };\n        console.log(event.target.checked)\n    };\n\n    const submitHandler = (event) => {\n        event.preventDefault();\n\n        axios.post(props.server + 'robots/pricing/', {\n            robot: robot,\n            start_date: startDate,\n            end_date: endDate,\n        })\n                .then(response => setResponse(response['data']))\n                .catch((error) => {\n                    console.error('Error Message:', error);\n                });\n        // props.hide();\n    };\n\n    return (\n        <Modal show={props.show} onHide={handleClose} animation={false} size={'xl'}>\n            <Modal.Header closeButton>\n                <Modal.Title>Pricing - {robot}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <Row style={{height:'100%'}}>\n                    <Col style={{height:'100%'}}>\n                        <Form onSubmit={submitHandler} style={{width: '100%', height:'100%'}}>\n                            <Row style={{height: '60px', width: '100%', padding: '5px', margin: '5px'}}>\n                                <Row style={{width: '100%', margin: '0px'}}>\n                                    <Form.Group style={{width: '100%', margin: '0px'}}>\n                                        <Form.Label className=\"form-label-first\" column sm={2}>\n                                            From\n                                        </Form.Label>\n                                        <Col sm={10}>\n                                            <Form.Control type=\"date\" onChange={startDateHandler}\n                                                          defaultValue={firstDay.toISOString().substr(0, 10)}/>\n                                        </Col>\n                                    </Form.Group>\n                                </Row>\n                                <Row style={{width: '100%', margin: '0px'}}>\n                                    <Form.Group style={{width: '100%'}}>\n                                        <Form.Label className=\"form-label-first\" column sm={2}>\n                                            To\n                                        </Form.Label>\n                                        <Col sm={10}>\n                                            <Form.Control type=\"date\" onChange={endDateHandler}\n                                                          defaultValue={date.toISOString().substr(0, 10)}/>\n                                        </Col>\n                                    </Form.Group>\n                                </Row>\n                            </Row>\n                        </Form>\n                    </Col>\n                    <Col style={{height:'100%'}}>\n                        <TreeView\n                    aria-label=\"file system navigator\"\n                    defaultCollapseIcon={<ExpandMoreIcon/>}\n                    defaultExpandIcon={<ChevronRightIcon/>}\n                    sx={{height: 200, flexGrow: 1, maxWidth: '100%', overflowY: 'auto'}}\n                >\n                    {treeData}\n                </TreeView>\n                    </Col>\n                </Row>\n            </Modal.Body>\n            <Modal.Footer>\n                <Row style={{width: '100%', margin: '0px'}}>\n                    <Col>\n                         <Form.Group className=\"mb-3\" controlId=\"formBasicCheckbox\">\n                        <Form.Check onClick={changeRobot} type=\"checkbox\" label=\"All Robots\"/>\n                    </Form.Group>\n                    </Col>\n                    <Col>\n                        <Form.Group style={{width: '100%'}}>\n                        <Col sm={10}>\n                            <Button variant=\"primary\" onClick={submitHandler} style={{width: '100%'}}>\n                                Calculate\n                            </Button>\n                        </Col>\n                    </Form.Group>\n                    </Col>\n                </Row>\n            </Modal.Footer>\n        </Modal>\n    );\n};\n\nexport default RobotPricingForm;","import Card from 'react-bootstrap/Card';\n\nconst CardWidgetMiddle = (props) => {\n    return (\n        <Card className=\"card\" style={{margin:'0px'}}>\n            <Card.Title style={{margin:'0px'}} className=\"card-header-first\">{props.title}</Card.Title>\n                {props.subTitle}\n            <Card.Body style={{display:'flex', justifyContent:'center', padding: '5px'}}>\n                {props.children}\n            </Card.Body>\n        </Card>\n    );\n};\nexport default CardWidgetMiddle;","import Card from \"react-bootstrap/Card\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Chart from \"react-apexcharts\";\n\nconst LineCharts = (props) => {\n    const chartOptions = {\n        options: {\n            chart: {\n                toolbar: false,\n                id: \"balance-cashflow\"\n            },\n            xaxis: {\n                categories: [],\n                labels: {show: false},\n                axisBorder: {\n                    show: false,\n                    color: '#78909C',\n                    height: 1,\n                    width: '100%',\n                    offsetX: 0,\n                    offsetY: 0\n                },\n                axisTicks: {\n                    show: false,\n                    borderType: 'solid',\n                    color: '#78909C',\n                    height: 6,\n                    offsetX: 0,\n                    offsetY: 0\n                },\n            },\n            yaxis: props.metaData.yaxis,\n            dataLabels: {\n                enabled: false\n            },\n        },\n\n        title: {\n            text: 'Cumulative Return',\n            align: 'left',\n            margin: 10,\n            offsetX: 0,\n            offsetY: 0,\n            floating: false,\n            style: {\n                fontSize: '14px',\n                fontWeight: 'bold',\n                // fontFamily: undefined,\n                color: '#263238'\n            },\n        },\n    };\n    return (\n        <Card className=\"card\" style={{margin: '0px'}}>\n            <Card.Title className=\"card-header-first\">{props.metaData.title}</Card.Title>\n            {props.subTitle}\n            <Card.Body style={{padding: '0px'}}>\n                <Row style={{height: '100%', width: '100%', margin: '0px'}}>\n                    <Col style={{height: '100%'}}>\n                        <div style={{padding: '0px', height: '100%'}}>\n                            <Chart\n                                options={chartOptions.options}\n                                series={props.metaData.series}\n                                width=\"100%\"\n                                height=\"100%\"\n                            />\n                        </div>\n                    </Col>\n                </Row>\n            </Card.Body>\n        </Card>\n    );\n};\nexport default LineCharts;","import Table from \"react-bootstrap/Table\";\nimport React, {useContext, useEffect, useState} from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport ReactHTMLTableToExcel from \"react-html-table-to-excel\";\nimport axios from \"axios\";\n\nconst RobotCashFlowTable = (props) => {\n    const [cashFlowData, setCashFlowData] = useState();\n    useEffect(() => {\n        axios.get(props.server + 'robots/robot_cash_flow/' + props.robot)\n            .then(response => response['data'].map(data => <tr key={data['id']}>\n                <td style={{fontSize: 12, verticalAlign: \"middle\"}}>{data['id']}</td>\n                <td style={{fontSize: 12, verticalAlign: \"middle\", color: data['cash_flow'] > 0 ? 'green':'red'}}>{data['cash_flow']}</td>\n                <td style={{fontSize: 12, verticalAlign: \"middle\"}}>{data['date']}</td>\n            </tr>)).then(data=>setCashFlowData(data))\n            .catch((error) => {\n                console.error('Error Message:', error);\n            });\n        }, [props]\n    );\n    return (\n        <Card className=\"card\" style={{margin: '2px', height: '100%'}}>\n                <Card.Title className=\"card-header-first\">Cash Flow</Card.Title>\n            <Card.Subtitle className=\"mb-2 text-muted\" style={{textAlign:'left', fontSize: 10, paddingLeft:'15px'}}>\n                <ReactHTMLTableToExcel\n                    id=\"test-table-xls-button\"\n                    className=\"download-table-xls-button\"\n                    table=\"cash-flow-table\"\n                    filename=\"cash_flow\"\n                    sheet=\"cash_flow\"\n                    buttonText=\"Export to Excel\"/>\n            </Card.Subtitle>\n                <div style={{overflowY: 'scroll', overflowX: 'hidden', height:'100%'}}>\n                    <Table id={'cash-flow-table'}>\n                        <thead style={{fontSize: 12}}>\n                        <tr>\n                            <th style={{verticalAlign: \"middle\"}}>ID</th>\n                            <th style={{verticalAlign: \"middle\"}}>Cash Flow</th>\n                            <th style={{verticalAlign: \"middle\"}}>Date</th>\n                        </tr>\n                        </thead>\n                        <tbody style={{height: '100%', overflow: 'scroll'}}>\n                        {cashFlowData}\n                        </tbody>\n                    </Table>\n                </div>\n            </Card>\n    );\n};\nexport default RobotCashFlowTable;","import Card from \"react-bootstrap/Card\";\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport ReactHTMLTableToExcel from \"react-html-table-to-excel\";\nimport Table from \"react-bootstrap/Table\";\nimport React, {useContext, useEffect, useState} from \"react\";\nimport axios from \"axios\";\nimport DateContext from \"../../../../context/date-context\";\n\nimport PieChartFull from \"../../../../components/Charts/PieChartFull\";\n\n//CSS\nimport './RobotStatistics.css'\n\nconst RobotStatistics = (props) => {\n    const [transactionData, setTransactionData] = useState([]);\n    const startDate = useContext(DateContext)['startDate'];\n    const endDate = useContext(DateContext)['endDate'];\n\n    let totalNumberOfTrades = transactionData.length;\n    let totalNumberOfShortTradesList = [];\n    let totalNumberOfLongTradesList = [];\n    let winningLongTrades = [];\n    let losingLongTrades = [];\n    let winningShortTrades = [];\n    let losingShortTrades = [];\n    let winningTradesList = [];\n    let losingTradesList = [];\n    let totalWinner = 0;\n    let totalLoser = 0;\n    let totalLongWinner = 0;\n    let totalShortWinner = 0;\n    let totalLongLoser = 0;\n    let totalShortLoser = 0;\n    let totalPnl = 0;\n\n    for (let i = 0; i < transactionData.length; i++) {\n        totalPnl+=transactionData[i]['pnl'];\n    };\n\n    // console.log(totalPnl)\n    // console.log(totalNumberOfShortTradesList)\n    // console.log(losingTradesList)\n    for (const val of transactionData) {\n        if (val['quantity'] < 0){\n            totalNumberOfShortTradesList.push(val['quantity']);\n            if (val['pnl'] < 0){\n                losingShortTrades.push(val['pnl']);\n            }else{\n                winningShortTrades.push(val['pnl']);\n            };\n        }else{\n            totalNumberOfLongTradesList.push(val['quantity']);\n            if (val['pnl'] < 0){\n                losingLongTrades.push(val['pnl']);\n            }else{\n                winningLongTrades.push(val['pnl']);\n            };\n        };\n        if (val['pnl'] < 0){\n            losingTradesList.push(val['pnl']);\n        }else{\n            winningTradesList.push(val['pnl']);\n        };\n    };\n\n    for (let i = 0; i < losingTradesList.length; i++) {\n        totalLoser+=losingTradesList[i];\n    };\n\n    for (let i = 0; i < winningTradesList.length; i++) {\n        totalWinner+=winningTradesList[i];\n    };\n    for (let i = 0; i < winningLongTrades.length; i++) {\n        totalLongWinner+=winningLongTrades[i];\n    };\n    for (let i = 0; i < winningShortTrades.length; i++) {\n        totalShortWinner+=winningShortTrades[i];\n    };\n    for (let i = 0; i < losingLongTrades.length; i++) {\n        totalLongLoser+=losingLongTrades[i];\n    };\n    for (let i = 0; i < losingShortTrades.length; i++) {\n        totalShortLoser+=losingShortTrades[i];\n    };\n    const avgLosingTrade = Math.round(((totalLoser / losingTradesList.length)) * 100) / 100\n    const avgWinningTrade = Math.round(((totalWinner / winningTradesList.length)) * 100) / 100\n    const winRatio = Math.round(((winningTradesList.length / transactionData.length)) * 10000) / 100\n    const lossRatio = Math.round(((losingTradesList.length / transactionData.length)) * 10000) / 100\n\n    useEffect(() => {\n            axios.get(props.server + 'robots/trades/', {\n                params: {\n                    robot: props.robot,\n                    start_date: startDate,\n                    end_date: endDate,\n                }\n            })\n                .then(data => setTransactionData(data['data']))\n                .catch((error) => {\n                    console.error('Error Message:', error);\n                });\n        }, [props]\n    );\n    return (\n        <Col style={{height:'100%'}}>\n            <Card className=\"card\" style={{margin: '0px', height: '100%'}}>\n                <Card.Title className=\"card-header-first\">Transaction Statistics</Card.Title>\n                <div style={{overflowY: 'scroll', overflowX: 'hidden', height: '100%'}}>\n                    <Table id={'cash-flow-table'}>\n                        <thead>\n                        <tr>\n                            <th className={'table-header'}></th>\n                            <th className={'table-header'}>All</th>\n                            <th className={'table-header'}>Long</th>\n                            <th className={'table-header'}>Short</th>\n                        </tr>\n                        </thead>\n                        <tbody style={{height: '100%', overflow: 'scroll'}}>\n                        <tr key={0}>\n                            <td className={'table-row-text'}>{'Profit'}</td>\n                            <td className={'table-row'} style={{\n                                color: totalPnl > 0 ? 'green' : 'red'\n                            }}>{Math.round(totalPnl * 100) / 100}</td>\n                            <td className={'table-row'} style={{\n                                color: totalLongWinner + totalLongLoser > 0 ? 'green' : 'red'\n                            }}>{Math.round((totalLongWinner + totalLongLoser) * 100) / 100}</td>\n                            <td className={'table-row'} style={{\n                                color: totalShortWinner + totalShortLoser > 0 ? 'green' : 'red'\n                            }}>{Math.round((totalShortWinner + totalShortLoser) * 100) / 100}</td>\n                        </tr>\n                        <tr key={2}>\n                            <td className={'table-row-text'}>{'Number Winning Trades'}</td>\n                            <td className={'table-row'}>{winningTradesList.length}</td>\n                            <td className={'table-row'}>{winningLongTrades.length}</td>\n                            <td className={'table-row'}>{winningShortTrades.length}</td>\n                        </tr>\n                        <tr key={3}>\n                            <td className={'table-row-text'}>{'Number Losing Trades'}</td>\n                            <td className={'table-row'}>{losingTradesList.length}</td>\n                            <td className={'table-row'}>{losingLongTrades.length}</td>\n                            <td className={'table-row'}>{losingShortTrades.length}</td>\n                        </tr>\n                        <tr key={4}>\n                            <td className={'table-row-text'}>{'Profitable P&L'}</td>\n                            <td className={'table-row'} style={{\n                                color: totalWinner > 0 ? 'green' : 'red'\n                            }}>{Math.round(totalWinner * 100) / 100}</td>\n                            <td className={'table-row'}>{Math.round(totalLongWinner * 100) / 100}</td>\n                            <td className={'table-row'}>{Math.round(totalShortWinner * 100) / 100}</td>\n                        </tr>\n                        <tr key={5}>\n                            <td className={'table-row-text'}>{'Losing P&L'}</td>\n                            <td className={'table-row'} style={{\n                                color: totalLoser > 0 ? 'green' : 'red'\n                            }}>{Math.round(totalLoser * 100) / 100}</td>\n                            <td className={'table-row'}>{Math.round(totalLongLoser * 100) / 100}</td>\n                            <td className={'table-row'}>{Math.round(totalShortLoser * 100) / 100}</td>\n                        </tr>\n                        <tr key={6}>\n                            <td className={'table-row-text'}>{'Profitable Trades %'}</td>\n                            <td className={'table-row'}>{winRatio}</td>\n                            <td className={'table-row'}>{Math.round(((winningLongTrades.length / transactionData.length)) * 10000) / 100}</td>\n                            <td className={'table-row'}>{Math.round(((winningShortTrades.length / transactionData.length)) * 10000) / 100}</td>\n                        </tr>\n                        <tr key={7}>\n                            <td className={'table-row-text'}>{'Losing Trades %'}</td>\n                            <td className={'table-row'}>{lossRatio}</td>\n                            <td className={'table-row'}>{Math.round(((losingLongTrades.length / transactionData.length)) * 10000) / 100}</td>\n                            <td className={'table-row'}>{Math.round(((losingShortTrades.length / transactionData.length)) * 10000) / 100}</td>\n                        </tr>\n                        <tr key={8}>\n                            <td className={'table-row-text'}>{'Avg Winning Trade'}</td>\n                            <td className={'table-row'}>{avgWinningTrade}</td>\n                            <td className={'table-row'}>{Math.round(((totalLongWinner / totalNumberOfLongTradesList.length)) * 100) / 100}</td>\n                            <td className={'table-row'}>{Math.round(((totalShortWinner / totalNumberOfShortTradesList.length)) * 100) / 100}</td>\n                        </tr>\n                        <tr key={9}>\n                            <td className={'table-row-text'}>{'Avg Losing Trade'}</td>\n                            <td className={'table-row'}>{avgLosingTrade}</td>\n                            <td className={'table-row'}>{Math.round(((totalLongLoser / totalNumberOfTrades)) * 100) / 100}</td>\n                            <td className={'table-row'}>{Math.round(((totalShortLoser / totalNumberOfTrades)) * 100) / 100}</td>\n                        </tr>\n                        <tr key={10}>\n                            <td className={'table-row-text'}>{'Profit Factor'}</td>\n                            <td className={'table-row'}>{Math.round((winRatio*avgWinningTrade)/(lossRatio*avgLosingTrade*-1)*100)/100}</td>\n                            <td className={'table-row'}>{'-'}</td>\n                            <td className={'table-row'}>{'-'}</td>\n                        </tr>\n                        <tr key={11}>\n                            <td className={'table-row-text'}>{'Payoff Ratio'}</td>\n                            <td className={'table-row'}>{Math.round((avgWinningTrade/(avgLosingTrade*-1))*100)/100}</td>\n                            <td className={'table-row'}>{'-'}</td>\n                            <td style={{fontSize: 12, verticalAlign: \"middle\"}}>{'-'}</td>\n                        </tr>\n                        </tbody>\n                    </Table>\n                </div>\n            </Card>\n        </Col>\n    );\n};\nexport default RobotStatistics;","import Col from \"react-bootstrap/Col\";\nimport CardWidgetMiddle from \"../../../../components/CardWidgetMiddle\";\nimport Row from \"react-bootstrap/Row\";\n\n//CSS\nimport './RobotGeneralInformation.css'\n\nconst RobotGeneralInformation = (props) => {\n    return (\n        <Row style={{height:'100px'}}>\n                <Col style={{height:'100%'}}>\n                    <CardWidgetMiddle title={'Strategy'}>\n                        <p className={'card-paragraph'}>{props.data['strategy']}</p>\n                    </CardWidgetMiddle>\n                </Col>\n                <Col style={{height:'100%'}}>\n                    <CardWidgetMiddle title={'Security'}>\n                        <p className={'card-paragraph'}>{props.data['security']}</p>\n                    </CardWidgetMiddle>\n                </Col>\n                <Col style={{height:'100%'}}>\n                    <CardWidgetMiddle title={'Inception Date'}>\n                        <p className={'card-paragraph'}>{props.data['inception_date']}</p>\n                    </CardWidgetMiddle>\n                </Col>\n                <Col style={{height:'100%'}}>\n                    <CardWidgetMiddle title={'Broker'}>\n                        <p className={'card-paragraph'}>{props.data['broker']}</p>\n                    </CardWidgetMiddle>\n                </Col>\n                <Col style={{height:'100%'}}>\n                    <CardWidgetMiddle title={'Account Number'}>\n                        <p className={'card-paragraph'}>{props.data['account_number']}</p>\n                    </CardWidgetMiddle>\n                </Col>\n                <Col style={{height:'100%'}}>\n                    <CardWidgetMiddle title={'Last Price'}>\n                        <p className={'card-paragraph'}>{props.data['price']}</p>\n                    </CardWidgetMiddle>\n                </Col>\n                <Col style={{height:'100%'}}>\n                    <CardWidgetMiddle title={'Last Pricing Date'}>\n                        <p className={'card-paragraph'} style={{color: props.data['date'] < props.data['end_date'] ? 'red': 'green'}}>{props.data['date']}</p>\n                    </CardWidgetMiddle>\n                </Col>\n            </Row>\n    )\n};\nexport default RobotGeneralInformation;","import Card from \"react-bootstrap/Card\";\n\nimport \"../../../MainCSS.css\"\nimport {useContext, useEffect, useState} from \"react\";\nimport axios from \"axios\";\nimport Chart from \"react-apexcharts\";\n\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport DateContext from \"../../../../context/date-context\";\n\nconst RobotDrawDown = (props) => {\n    const startDate = useContext(DateContext)['startDate'];\n    const endDate = useContext(DateContext)['endDate'];\n    const [chartData, setChartData] = useState([]);\n\n    useEffect(() => {\n            axios.get(props.server + 'robots/drawdown/', {\n                params: {\n                    robot: props.robot,\n                    start_date: startDate,\n                    end_date: endDate,\n                }\n            })\n                .then(response => response['data'].map(data=>data))\n                .then(data=>setChartData(data))\n                .catch((error) => {\n                    console.error('Error Message:', error);\n                });\n        }, [props]\n    );\n    const chartOptions = {\n        options: {\n            chart: {\n                toolbar: false,\n                id: \"basic-bar\"\n            },\n            xaxis: {\n                categories: [],\n                labels: {show: false}\n            },\n            yaxis: [\n                {\n                    labels: {\n                        formatter: function (val) {\n                            return val.toFixed(0);\n                        }\n                    }\n                }\n            ],\n            dataLabels: {\n                enabled: false\n            },\n\n        },\n        series: [\n            {\n                name: \"Drawdown\",\n                data: chartData,\n            }\n        ]\n    };\n    return (\n        <Card className=\"card\" style={{margin:'0px'}}>\n            <Card.Title className=\"card-header-first\">Drawdown</Card.Title>\n            <Card.Body style={{padding: '0px'}}>\n                <Row style={{height: '100%'}}>\n                    <Col style={{height: '100%'}}>\n                        <Chart\n                            options={chartOptions.options}\n                            series={chartOptions.series}\n                            type={'bar'}\n                            width=\"100%\"\n                            height=\"100%\"\n                        />\n                    </Col>\n                </Row>\n            </Card.Body>\n        </Card>\n    );\n};\n\nexport default RobotDrawDown;","import Card from \"react-bootstrap/Card\";\n\nimport \"../../../MainCSS.css\"\nimport Chart from \"react-apexcharts\";\nimport {useEffect, useState} from \"react\";\nimport axios from \"axios\";\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\n\n// Charts\nimport CumulativeReturnChart from \"../../Charts/CumulativeReturn\";\n\nconst RobotReturn = (props) => {\n    const [chartData, setChartData] = useState([]);\n\n    useEffect(() => {\n            axios.get(props.server + 'robots/cumulative_ret/', {\n                params: {\n                    robot: props.robot,\n                    start_date: props.start_date,\n                    end_date: props.end_date\n                }\n            })\n                .then(response => response['data'].map(data => data))\n                .then(data => setChartData(data))\n                .catch((error) => {\n                    console.error('Error Message:', error);\n                });\n        }, [props]\n    );\n    return (\n        <CumulativeReturnChart data={chartData}/>\n    );\n};\n\nexport default RobotReturn;","import CardWidgetMiddle from \"../../../../components/CardWidgetMiddle\";\nimport LineCharts from \"../../../../components/Charts/LineCharts\";\nimport RobotCashFlowTable from \"./RobotCashFlowTable\";\nimport RobotStatistics from \"./RobotStatistics\";\nimport RobotCashFlowChart from \"./RobotCashFlowChart\";\nimport RobotGeneralInformation from \"./RobotGeneralInformation\";\nimport RobotDrawDown from \"../RobotRisk/RobotDrawDown\";\nimport RobotReturn from \"../RobotReturn/RobotReturn\";\n\n// Bootstrap\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport Container from \"react-bootstrap/Container\";\n\nimport {useContext, useEffect, useState} from \"react\";\nimport axios from \"axios\";\nimport DateContext from \"../../../../context/date-context\";\nimport Card from \"react-bootstrap/Card\";\n\n//CSS\nimport './RobotDashBoardPage.css'\n\nconst RobotDashBoardPage = (props) => {\n    const startDate = useContext(DateContext)['startDate'];\n    const endDate = useContext(DateContext)['endDate'];\n    const [balanceData, setBalanceData] = useState([]);\n    const [pnlData, setPnlData] = useState([]);\n    const [cashFlowData, setCashFlowData] = useState([]);\n    const [dateData, setDateData] = useState([]);\n    const [robotData, setRobotData] = useState([props.default]);\n    const [priceData, setPriceData] = useState([]);\n    const totalProfit = Math.round(pnlData.reduce((a, b) => a + b, 0) * 100) / 100\n    const totalCashFlow = Math.round(cashFlowData.reduce((a, b) => a + b, 0) * 100) / 100\n    useEffect(() => {\n            axios.get(props.server + 'robots/get_robot/'+props.robot)\n                .then(response => response['data'].map(data=>data))\n                .then(data=>setRobotData(data))\n                .catch((error) => {\n                    console.error('Error Message:', error);\n                });\n        }, [props]\n    );\n    useEffect(() => {\n            axios.get(props.server + 'robots/get_last_price/', {\n                params: {\n                    robot: props.robot,\n                    start_date: props.start_date,\n                    end_date: props.end_date,\n                }\n            })\n                .then(function(response){\n                    const data = response['data'];\n                    setPriceData(data);\n                })\n                .catch((error) => {\n                    console.error('Error Message:', error);\n                });\n        }, [props]\n    );\n    useEffect(() => {\n            axios.get(props.server + 'robots/get_balance/', {\n                params: {\n                    robot: props.robot,\n                    start_date: startDate,\n                    end_date: endDate,\n                }\n            })\n                .then(function(response){\n                    const data = response['data'];\n                    const balance_list = data.map(data => data['close_balance']);\n                    const pnl_list = data.map(data => data['realized_pnl']);\n                    const date_list = data.map(data => data['date']);\n                    const cashFlowList = data.map(data => data['cash_flow']);\n                    setBalanceData(balance_list);\n                    setPnlData(pnl_list);\n                    setDateData(date_list);\n                    setCashFlowData(cashFlowList);\n                })\n                .catch((error) => {\n                    console.error('Error Message:', error);\n                });\n        }, [props]\n    );\n    const balanceChartDataSet = {\n        series: [\n            {\n                name: \"Balance\",\n                type: 'line',\n                data: balanceData,\n            },\n            {\n                name: \"Cash Flow\",\n                type: 'bar',\n                data: cashFlowData,\n            }\n        ],\n        yaxis: [\n            {\n                min: Math.min(...balanceData),\n                title: {\n                    text: 'Balance',\n                },\n                labels: {\n                    formatter: function (val) {\n                        return val.toFixed(2);\n                    }\n                },\n            },\n            {\n                opposite: true,\n                title: {\n                    text: 'Cash Flow',\n\n                },\n                labels: {\n                    formatter: function (val) {\n                        return val.toFixed(2);\n                    }\n                },\n            }\n        ],\n        title: 'Balance',\n        subTitle: Math.round(balanceData[balanceData.length - 1] * 100) / 100,\n        pnl: Math.round((balanceData[balanceData.length-1]-balanceData[0])*100)/100,\n        perReturn: Math.round(((balanceData[balanceData.length-1]-balanceData[0]-totalCashFlow)/balanceData[0])*10000)/100,\n    }\n\n    const balanceSubtitle =\n        <Card.Subtitle className=\"mb-2 text-muted\" style={{textAlign: 'left', fontSize: 40, paddingLeft: '15px'}}>\n            <div>\n                <div>\n                    {balanceChartDataSet.subTitle + ' USD '}\n                </div>\n            </div>\n        </Card.Subtitle>\n\n    const robotGeneralInformation = {\n        'strategy': robotData[0]['strategy'],\n        'security': robotData[0]['security'],\n        'inception_date': robotData[0]['inception_date'],\n        'broker': robotData[0]['broker'],\n        'account_number': robotData[0]['account_number'],\n        'price': Math.round(priceData['price'] * 100) / 100,\n        'date': priceData['date'],\n        'end_date': endDate,\n    }\n    return (\n        <Container fluid>\n            <RobotGeneralInformation data={robotGeneralInformation}/>\n            <Row style={{height:'80%', marginTop:'20px'}}>\n                <Col style={{height: '100%'}}>\n                    <Row style={{height:'50%'}}>\n                        <Col>\n                            <LineCharts metaData={balanceChartDataSet} subTitle={balanceSubtitle}/>\n                        </Col>\n                    </Row>\n                    <Row style={{height:'50%', marginTop:'20px'}}>\n                        <Col>\n                            <RobotCashFlowTable server={props.server} robot={props.robot}/>\n                        </Col>\n                    </Row>\n                </Col>\n                <Col style={{height:'100%'}}>\n                    <Row style={{height:'20%'}}>\n                        <Col>\n                            <CardWidgetMiddle title={'Profit'}>\n                                <p className={'card-paragraph-profit'} style={{color: totalProfit > 0 ? 'darkgreen' : 'darkred',}}>{totalProfit}</p>\n                            </CardWidgetMiddle>\n                        </Col>\n                        <Col>\n                            <CardWidgetMiddle title={'Deposit'}>\n                                {/*<p className={'card-paragraph'}>{profitSubtitle}</p>*/}\n                            </CardWidgetMiddle>\n                        </Col>\n                        <Col>\n                            <CardWidgetMiddle title={'Withdraw'}>\n                                {/*<p className={'card-paragraph'}>{profitSubtitle}</p>*/}\n                            </CardWidgetMiddle>\n                        </Col>\n                    </Row>\n                    <Row style={{height:'80%', marginTop:'20px'}}>\n                        <RobotStatistics server={props.server} robot={props.robot}/>\n                    </Row>\n                </Col>\n                <Col style={{height:'100%'}}>\n                    <Row style={{height:'50%'}}>\n                        <Col>\n                            <RobotReturn robot={props.robot} start_date={startDate} end_date={endDate}\n                                     server={props.server}/>\n                        </Col>\n                    </Row>\n                    <Row style={{height:'50%', marginTop:'20px'}}>\n                        <Col>\n                            <RobotDrawDown robot={props.robot} server={props.server}/>\n                        </Col>\n                    </Row>\n\n                </Col>\n            </Row>\n        </Container>\n    );\n};\n\nexport default RobotDashBoardPage;\n","import Card from \"react-bootstrap/Card\";\nimport Row from 'react-bootstrap/Row';\nimport Chart from \"react-apexcharts\";\nimport Col from 'react-bootstrap/Col';\n\n\nimport \"../../../MainCSS.css\"\n\nconst RobotTrades = (props) => {\n    // let losingTradeNumber = 0;\n    // let winningTradeNumber = 0;\n    // let losingTrades = [];\n    // let winningTrades = [];\n    // let totalWinner = 0.0;\n    // let totalLoser= 0.0;\n    //\n    // for (const val of props.data) {\n    //     if (val < 0) {\n    //         losingTradeNumber=+losingTradeNumber+1;\n    //         losingTrades.push(val);\n    //     } else if (val > 0){\n    //         winningTradeNumber=+winningTradeNumber+1;\n    //         winningTrades.push(val);\n    //     };\n    //\n    // };\n    //\n    // for (let i = 0; i < losingTrades.length; i++) {\n    //     totalLoser += losingTrades[i];\n    // };\n    //\n    // for (let i = 0; i < winningTrades.length; i++) {\n    //     totalWinner += winningTrades[i];\n    // };\n    //\n    // let winPerc = Math.round((winningTradeNumber) / (losingTradeNumber + winningTradeNumber)*100)/100;\n    // let lossPerc = Math.round(losingTradeNumber / (losingTradeNumber + winningTradeNumber)*100)/100;\n    // let avgWinner = Math.round(totalWinner/winningTrades.length*100)/100;\n    // let avgLoser = Math.round(totalLoser/losingTrades.length*100)/100;\n\n    const chartOptions = {\n        options: {\n            chart: {\n                toolbar: false,\n                id: \"basic-bar\"\n            },\n            colors: [function(value){\n                if (value['value'] < 0){\n                    return '#E32227'\n                }else {\n                    return '#007500'\n                }\n            }],\n            xaxis: {\n                categories: [],\n                labels: {show: false}\n            },\n            yaxis: [\n                {\n                    labels: {\n                        formatter: function (val) {\n                            return val.toFixed(0);\n                        }\n                    },\n                    title: {\n            text: 'Profit'\n          }\n                }\n            ],\n            dataLabels: {\n                enabled: false\n            },\n\n        },\n        series: [\n            {\n                name: \"series-1\",\n                data: props.data,\n            }\n        ]\n    };\n    return (\n        <Card className=\"card\" style={{margin: '2px', height: '100%'}}>\n            <Card.Title className=\"card-header-first\">Profit and Loss</Card.Title>\n            <Card.Body style={{padding: '0px'}}>\n                <Chart\n                    options={chartOptions.options}\n                    series={chartOptions.series}\n                    type={'bar'}\n                    width=\"100%\"\n                    height=\"100%\"/>\n\n            </Card.Body>\n        </Card>\n);\n};\n\nexport default RobotTrades;","import React from \"react\";\n\nconst RobotTransactionContext = React.createContext({\n\n});\nexport default RobotTransactionContext;","import Modal from \"react-bootstrap/Modal\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport axios from \"axios\";\nimport {useContext, useState, useRef} from \"react\";\nimport RobotTransactionContext from \"./RobotTransactionContext\";\n\nconst RobotTransactionUpdateModal = (props) => {\n    const saveModalStatus = useContext(RobotTransactionContext)['saveModalDataParameters'];\n    const quantityRef = useRef();\n    const statusRef = useRef();\n    const pnlRef = useRef();\n    const openPriceRef = useRef();\n    const closePriceRef = useRef();\n    const openTimeRef = useRef();\n    const closeTimeRef = useRef();\n    const handleClose = () => {\n        saveModalStatus({'data': [], 'status': false});\n    };\n    const submitHandler = (event) => {\n        event.preventDefault();\n        const quantity = quantityRef.current.value\n        const status = statusRef.current.value\n        const pnl = pnlRef.current.value\n        const openPrice = openPriceRef.current.value\n        const closePrice = closePriceRef.current.value\n        const openTime = openTimeRef.current.value\n        const closeTime = closeTimeRef.current.value\n        axios.post(props.server + 'trade_page/edit_transaction/', {\n            status: status,\n            quantity: quantity,\n            pnl: pnl,\n            open_price: openPrice,\n            close_price: closePrice,\n            open_time: openTime,\n            close_time: closeTime,\n            id: props.data[9],\n        })\n            .catch((error) => {\n                console.error('Error Message:', error);\n            });\n    };\n    return (\n        <Modal show={props.show} onHide={handleClose} animation={false}>\n            <Modal.Header closeButton>\n                <Modal.Title>Edit Transaction - Broker ID - {props.data[8]}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body style={{width: '100%', height: '700px'}}>\n                <Form onSubmit={submitHandler} style={{width: '100%'}}>\n                    <Form.Group className=\"mb-3\" controlId=\"quantity_type\">\n                        <Form.Label>Status</Form.Label>\n                        <Form.Control ref={statusRef} defaultValue={props.data[1]}\n                                      as=\"select\">\n                            <option value={'OPEN'}>OPEN</option>\n                            <option value={'CLOSED'}>CLOSED</option>\n                        </Form.Control>\n                    </Form.Group>\n                    <Form.Group className=\"mb-3\">\n                        <Form.Label>Quantity</Form.Label>\n                        <Form.Control ref={quantityRef} type=\"number\" defaultValue={props.data[0]}\n                                      step={1}/>\n                    </Form.Group>\n                    <Form.Group className=\"mb-3\">\n                        <Form.Label>P&L</Form.Label>\n                        <Form.Control ref={pnlRef} type=\"number\" defaultValue={props.data[2]}\n                                      step={1}/>\n                    </Form.Group>\n                    <Form.Group className=\"mb-3\">\n                        <Form.Label>Open Price</Form.Label>\n                        <Form.Control ref={openPriceRef} type=\"number\" defaultValue={props.data[3]}\n                                      min={0.0}\n                                      step={0.01}/>\n                    </Form.Group>\n                    <Form.Group className=\"mb-3\">\n                        <Form.Label>Close Price</Form.Label>\n                        <Form.Control ref={closePriceRef} type=\"number\" defaultValue={props.data[4]}\n                                      min={0.0}\n                                      step={0.01}/>\n                    </Form.Group>\n                    <Form.Group className=\"mb-3\">\n                        <Form.Label>Open Time</Form.Label>\n                        <Form.Control ref={openTimeRef} type=\"date\" defaultValue={props.data[5]}/>\n                    </Form.Group>\n                    <Form.Group className=\"mb-3\">\n                        <Form.Label>Close Time</Form.Label>\n                        <Form.Control ref={closeTimeRef} type=\"date\" defaultValue={props.data[6]}/>\n                    </Form.Group>\n                </Form>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"primary\" onClick={submitHandler}>\n                    Save\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n};\nexport default RobotTransactionUpdateModal;","import Button from \"react-bootstrap/Button\";\nimport {useContext, useState} from \"react\";\nimport RobotTransactionUpdateModal from \"./RobotTransactionUpdateModal\";\nimport RobotTransactionContext from \"./RobotTransactionContext\";\n\nconst RobotTransactionTableRow = (props) => {\n    const saveModalData = useContext(RobotTransactionContext)['saveModalDataParameters'];\n    const getTransactionData = (event) => {\n        const rowData = event.target.parentElement.parentElement.children\n        const rowList = []\n        for (let i = 0; i < rowData.length; i++){\n            rowList.push(rowData[i].innerHTML)\n        }\n        saveModalData({'data': rowList, 'status': true});\n    };\n    return (\n        <>\n            <tr>\n                <td style={{fontSize: 14, verticalAlign: \"middle\"}}>{props.quantity}</td>\n                <td style={{fontSize: 14, verticalAlign: \"middle\"}}>{props.status}</td>\n                <td style={{fontSize: 14, verticalAlign: \"middle\", color: props.pnl < 0 ? '#E32227':'#007500'}}>{props.pnl}</td>\n                <td style={{fontSize: 14, verticalAlign: \"middle\"}}>{props.open_price}</td>\n                <td style={{fontSize: 14, verticalAlign: \"middle\"}}>{props.close_price}</td>\n                <td style={{fontSize: 14, verticalAlign: \"middle\"}}>{props.open_time}</td>\n                <td style={{fontSize: 14, verticalAlign: \"middle\"}}>{props.close_time}</td>\n                <td style={{fontSize: 14, verticalAlign: \"middle\"}}>{props.side}</td>\n                <td style={{fontSize: 14, verticalAlign: \"middle\"}}>{props.broker_id}</td>\n                <td style={{fontSize: 14, verticalAlign: \"middle\"}}>{props.id}</td>\n                <td><Button onClick={getTransactionData}>Update</Button></td>\n            </tr>\n        </>\n    );\n};\nexport default RobotTransactionTableRow","import Table from \"react-bootstrap/Table\";\nimport Card from \"react-bootstrap/Card\";\nimport Button from \"react-bootstrap/Button\";\n\nimport React from \"react\";\nimport RobotTransactionTableRow from \"./RobotTransactionTableRow\";\nimport RobotTransactionUpdateModal from \"./RobotTransactionUpdateModal\";\nimport RobotTransactionContext from \"./RobotTransactionContext\";\nimport {useState} from \"react\";\n\nimport ReactHTMLTableToExcel from 'react-html-table-to-excel';\n\nconst RobotTransactionsTable = (props) => {\n    const [modalDataParameters, setModalDataParameters] = useState({'data': [], status: false});\n    const transactionRows = props.data.map(data =>\n        <RobotTransactionTableRow\n            key={data['id']}\n            quantity={data['quantity']}\n            status={data['status']}\n            pnl={data['pnl']}\n            open_price={data['open_price']} close_price={data['close_price']}\n            open_time={data['open_time']}\n            close_time={data['close_time']}\n            side={data['side']}\n            broker_id={data['broker_id']}\n            id={data['id']}\n        />\n    );\n    console.log(modalDataParameters)\n    return (\n        <RobotTransactionContext.Provider value={{saveModalDataParameters: setModalDataParameters}}>\n            <Card className=\"card\" style={{margin: '2px', height: '100%'}}>\n                <Card.Title className=\"card-header-first\">Transactions</Card.Title>\n                <Card.Subtitle className=\"mb-2 text-muted\"\n                               style={{textAlign: 'left', fontSize: 10, paddingLeft: '15px'}}>\n                    <ReactHTMLTableToExcel\n                        id=\"test-table-xls-button\"\n                        className=\"download-table-xls-button\"\n                        table=\"transaction-table\"\n                        filename=\"transactions\"\n                        sheet=\"transactions\"\n                        buttonText=\"Export to Excel\"/>\n                </Card.Subtitle>\n                <div style={{overflowY: 'scroll', overflowX: 'hidden', height: '100%'}}>\n                    <Table id={'transaction-table'}>\n                        <thead style={{fontSize: 12}}>\n                        <tr>\n                            <th style={{verticalAlign: \"middle\"}}>Quantity</th>\n                            <th style={{verticalAlign: \"middle\"}}>Status</th>\n                            <th style={{verticalAlign: \"middle\"}}>P&L</th>\n                            <th style={{verticalAlign: \"middle\"}}>Open Price</th>\n                            <th style={{verticalAlign: \"middle\"}}>Close Price</th>\n                            <th style={{verticalAlign: \"middle\"}}>Open Time</th>\n                            <th style={{verticalAlign: \"middle\"}}>Close Time</th>\n                            <th style={{verticalAlign: \"middle\"}}>Side</th>\n                            <th style={{verticalAlign: \"middle\"}}>Broker ID</th>\n                            <th style={{verticalAlign: \"middle\"}}>ID</th>\n                            <th style={{verticalAlign: \"middle\"}}></th>\n                        </tr>\n                        </thead>\n                        <tbody style={{height: '100%', overflow: 'scroll'}}>\n                        {transactionRows}\n                        </tbody>\n                    </Table>\n                </div>\n                <RobotTransactionUpdateModal server={props.server} show={modalDataParameters['status']} data={modalDataParameters['data']}/>\n            </Card>\n        </RobotTransactionContext.Provider>\n    );\n};\nexport default RobotTransactionsTable;","import Card from \"react-bootstrap/Card\";\nimport Row from 'react-bootstrap/Row';\nimport Chart from \"react-apexcharts\";\nimport Col from 'react-bootstrap/Col';\n\nimport \"../../../MainCSS.css\"\n\nconst RobotTradesQuantiy = (props) => {\n    const chartOptions = {\n        options: {\n            chart: {\n                toolbar: false,\n                id: \"basic-bar\"\n            },\n            xaxis: {\n                categories: [],\n                labels: {show: false}\n            },\n            yaxis: [\n                {\n                    labels: {\n                        formatter: function (val) {\n                            return val.toFixed(0);\n                        }\n                    },\n                    title: {\n            text: 'Quantity'\n          }\n                }\n            ],\n            dataLabels: {\n                enabled: false\n            },\n        },\n        series: [\n            {\n                name: \"series-1\",\n                data: props.data,\n            }\n        ]\n    };\n    return (\n        <Card className=\"card\" style={{margin: '2px', height:'100%'}}>\n            <Card.Title className=\"card-header-first\">Quantity</Card.Title>\n            <Card.Body style={{padding: '0px'}}>\n                        <Chart\n                            options={chartOptions.options}\n                            series={chartOptions.series}\n                            type={'bar'}\n                            width=\"100%\"\n                            height=\"100%\"/>\n            </Card.Body>\n        </Card>\n);\n};\n\nexport default RobotTradesQuantiy;","import RobotTrades from \"./RobotTrades\";\nimport RobotTransactionsTable from \"./RobotTransactionsTable\";\nimport DateSelectorRobotPage from \"../../DateSelectorRobotPage\";\nimport RobotTradesStatistics from \"./RobotTradesStatistics\";\nimport RobotTradesQuantiy from \"./RobotTradesQuantity\";\n// Bootstrap\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col'\nimport Container from \"react-bootstrap/Container\";\nimport {useContext, useEffect, useState} from \"react\";\nimport axios from \"axios\";\nimport DateContext from \"../../../../context/date-context\";\n\nconst RobotTransactionsPage = (props) => {\n    const [transactionData, setTransactionData] = useState([]);\n    const pnlData = transactionData.map(data => data['pnl'])\n    const quantityData = transactionData.map(data => data['quantity'])\n    const startDate = useContext(DateContext)['startDate'];\n    const endDate = useContext(DateContext)['endDate'];\n\n    useEffect(() => {\n            axios.get(props.server + 'robots/trades/', {\n                params: {\n                    robot: props.robot,\n                    start_date: startDate,\n                    end_date: endDate,\n                }\n            })\n                .then(data => setTransactionData(data['data']))\n                .catch((error) => {\n                    console.error('Error Message:', error);\n                });\n        }, [props]\n    );\n\n    return (\n        <Container fluid>\n            <Row style={{width: '100%', height: '800px', margin: '0px', padding: '0px'}}>\n                <Col style={{margin: '0px', width: '50%', padding: '0px'}}>\n                    <Row style={{height: '100%', width: '100%', margin: '0px'}}>\n                        <Row style={{height: '50%', width: '100%', padding: '5px', margin: '0px'}}>\n                            <RobotTrades data={pnlData}/>\n                        </Row>\n                        <Row style={{height: '50%', width: '100%', padding: '5px', margin: '0px'}}>\n                            <RobotTradesQuantiy data={quantityData}/>\n                        </Row>\n                    </Row>\n                </Col>\n                <Col style={{margin: '0px', width: '50%', height: '100%', padding: '0px'}}>\n                    <Row style={{height: '100%', width: '100%', padding: '5px', margin: '0px'}}>\n                        <RobotTransactionsTable server={props.server} data={transactionData}/>\n                    </Row>\n                </Col>\n            </Row>\n            {/*<Col style={{margin: '0px', width: '100%', height: '100%', padding: '0px', background: 'green'}}>*/}\n            {/*    <RobotTradesStatistics data={pnlData}/>*/}\n            {/*</Col>*/}\n        </Container>\n    );\n};\n\nexport default RobotTransactionsPage;","import RobotDrawDown from \"./RobotDrawDown\";\nimport DateSelectorRobotPage from \"../../DateSelectorRobotPage\";\n// Bootstrap\nimport Container from \"react-bootstrap/Container\";\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport {useState} from \"react\";\n\nconst RobotRiskPage = (props) => {\n    return (\n        <Container fluid>\n            <Row style={{width: '100%', height: '100%', margin: '0px'}}>\n                <Row style={{width: '100%', height: '400px', margin: '0px'}}>\n                    <RobotDrawDown robot={props.robot} server={props.server}/>\n                </Row>\n            </Row>\n        </Container>\n    );\n};\n\nexport default RobotRiskPage;","import Card from \"react-bootstrap/Card\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Chart from \"react-apexcharts\";\nimport {useEffect, useState} from \"react\";\nimport axios from \"axios\";\n\nconst RobotDailyReturns = (props) => {\n    const [chartData, setChartData] = useState([]);\n    const dailyReturnList = chartData.map(data => Math.round(data['ret']*10000)/100)\n    useEffect(() => {\n            axios.get(props.server + 'robots/get_balance/', {\n                params: {\n                    robot: props.robot,\n                    start_date: props.start_date,\n                    end_date: props.end_date\n                }\n            })\n                .then(response => response['data'].map(data=>data))\n                .then(data=>setChartData(data))\n                .catch((error) => {\n                    console.error('Error Message:', error);\n                });\n        }, [props]\n    );\n    const chartOptions = {\n        options: {\n            chart: {\n                toolbar: false,\n                id: \"basic-bar\"\n            },\n            colors: [function(value){\n                if (value['value'] < 0){\n                    return '#E32227'\n                }else {\n                    return '#007500'\n                }\n            }],\n            annotations: {\n                yaxis: [\n                    {\n                        y: -5,\n                        borderColor: '#BF4737',\n                        label: {\n                            borderColor: '#BF4737',\n                            style: {\n                                color: '#fff',\n                                background: '#BF4737'\n                            },\n                            text: 'Daily Risk Limit'\n                        }\n                    }\n                ]\n            },\n            xaxis: {\n                categories: [],\n                labels: {show: false}\n            },\n            yaxis: [\n                {\n                    tickAmount: 10,\n                    labels: {\n                        formatter: function (val) {\n                            return val.toFixed(0);\n                        }\n                    }\n                }\n            ],\n            dataLabels: {\n                enabled: false,\n                textAnchor: 'middle',\n                style: {\n                    fontSize: '14px',\n                    fontFamily: 'Helvetica, Arial, sans-serif',\n                    fontWeight: 'bold',\n                    colors: undefined\n                },\n            },\n        },\n        series: [\n            {\n                name: \"Daily Retur\",\n                data: dailyReturnList,\n            }\n        ]\n    };\n\n    return (\n        <Card className=\"card\" style={{margin: '0px'}}>\n            <Card.Title className=\"card-header-first\">Daily Returns</Card.Title>\n            <Card.Body style={{padding: '0px'}}>\n                <Row style={{height: '100%', width: '100%', margin: '0px'}}>\n                    <Col style={{height: '100%'}}>\n                        <Chart\n                            options={chartOptions.options}\n                            series={chartOptions.series}\n                            type={'bar'}\n                            width=\"100%\"\n                            height=\"100%\"\n                        />\n                    </Col>\n                </Row>\n            </Card.Body>\n        </Card>\n    );\n};\n\nexport default RobotDailyReturns;","import Card from \"react-bootstrap/Card\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Chart from \"react-apexcharts\";\nimport {useEffect, useState} from \"react\";\nimport axios from \"axios\";\n\nconst RobotMonthlyReturns = (props) => {\n    const [monthlyChartData, setMonthlyChartData] = useState([]);\n    useEffect(() => {\n            axios.get(props.server + 'robots/monthly_returns_calc/', {\n                params: {\n                    robot: props.robot,\n                    year: '2022'\n                }\n            })\n                .then(response => setMonthlyChartData(response['data']))\n                .catch((error) => {\n                    console.error('Error Message:', error);\n                });\n        }, [props]\n    );\n    const chartOptions = {\n        options: {\n            chart: {\n                toolbar: false,\n                id: \"basic-bar\"\n            },\n            colors: [function(value){\n                if (value['value'] < 0){\n                    return '#E32227'\n                }else {\n                    return '#007500'\n                }\n            }],\n            annotations: {\n                yaxis: [\n                    {\n                        y: -10,\n                        borderColor: '#BF4737',\n                        label: {\n                            borderColor: '#BF4737',\n                            style: {\n                                color: '#fff',\n                                background: '#BF4737'\n                            },\n                            text: 'Monthly Risk Limit'\n                        }\n                    }\n                ]\n            },\n            xaxis: {\n                // categories: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n                // labels: {show: true}\n            },\n            yaxis: [\n                {\n                    labels: {\n                        formatter: function (val) {\n                            return val.toFixed(0);\n                        }\n                    }\n                }\n            ],\n            dataLabels: {\n                enabled: false\n            },\n        },\n        series: [\n            {\n                name: \"Monthly Return\",\n                data: monthlyChartData,\n            }\n        ]\n    };\n    return (\n        <Card className=\"card\" style={{margin: '0px'}}>\n            <Card.Title className=\"card-header-first\">Monthly Returns</Card.Title>\n            <Card.Body style={{padding: '0px'}}>\n                <Row style={{height: '100%', width: '100%', margin: '0px'}}>\n                    <Col style={{height: '100%'}}>\n                        <Chart\n                            options={chartOptions.options}\n                            series={chartOptions.series}\n                            type={'bar'}\n                            width=\"100%\"\n                            height=\"100%\"\n                        />\n                    </Col>\n                </Row>\n            </Card.Body>\n        </Card>\n    );\n};\nexport default RobotMonthlyReturns;","import RobotReturn from \"./RobotReturn\";\nimport RobotDailyReturns from \"./RobotDailyReturns\";\nimport RobotMonthlyReturns from \"./RobotMonthlyReturns\";\n\n// Bootstrap\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Container from \"react-bootstrap/Container\";\nimport {useContext, useEffect, useState} from \"react\";\nimport DateContext from \"../../../../context/date-context\";\nimport axios from \"axios\";\n\nconst RobotReturnPage = (props) => {\n    const startDate = useContext(DateContext)['startDate'];\n    const endDate = useContext(DateContext)['endDate'];\n\n    return (\n        <Container fluid>\n            <Row style={{width: '100%', height: '100%', margin: '0px'}}>\n                <Col style={{width: '50%', height: '100%'}}>\n                    <Row style={{height: '60%', padding: '4px'}}>\n                        <RobotReturn robot={props.robot} start_date={startDate} end_date={endDate}\n                                     server={props.server}/>\n                    </Row>\n                    <Row style={{height: '40%', padding: '4px'}}>\n                        <RobotDailyReturns robot={props.robot} start_date={startDate} end_date={endDate}\n                                           server={props.server}/>\n                    </Row>\n                </Col>\n                <Col>\n                    <Row style={{height: '40%', padding: '4px'}}>\n                        <RobotMonthlyReturns robot={props.robot} start_date={startDate} end_date={endDate}\n                                           server={props.server}/>\n                    </Row>\n                </Col>\n            </Row>\n        </Container>\n    );\n};\n\nexport default RobotReturnPage;","import CardWidget from \"../../../../components/CardWidget\";\n\nimport Form from 'react-bootstrap/Form'\nimport Button from \"react-bootstrap/Button\";\nimport {useEffect, useState} from \"react\";\nimport axios from \"axios\";\n\nconst RobotRiskSettings = (props) => {\n    const [dailyRiskPerc, setDailyRiskPerc] = useState();\n    const [dailyTradeLimit, setDailyTradeLimit] = useState();\n    const [riskPerTrade, setRiskPerTrade] = useState();\n    const [quantityType, setQuantityType] = useState();\n    const [quantity, setQuantity] = useState();\n    const [sl, setSl] = useState();\n    const [winExp, setWinExp] = useState();\n    // Fetching robot risk data from database\n    useEffect(() => {\n            fetch(props.server + 'risk/get_risk/' + props.robot)\n                .then(response => response.json())\n                .then(function(data){\n                    setDailyRiskPerc(data['daily_risk_perc']);\n                    setDailyTradeLimit(data['daily_trade_limit']);\n                    setRiskPerTrade(data['risk_per_trade']);\n                    setQuantityType(data['quantity_type']);\n                    setQuantity(data['quantity']);\n                    setSl(data['sl']);\n                    setWinExp(data['win_exp']);\n                })\n                .catch((error) => {\n                    console.error('Error Message:', error);\n                });\n        }, [props]\n    );\n    const submitForm = (event) => {\n        event.preventDefault();\n        axios.post(props.server + 'risk/update_robot_risk/', {\n            robot: props.robot,\n            daily_risk: dailyRiskPerc,\n            nbm_trades: dailyTradeLimit,\n            risk_per_trade: riskPerTrade,\n            pyramiding_level: 1,\n            quantity_type: quantityType,\n            quantity: quantity,\n            sl: sl,\n            win_exp: winExp,\n        })\n            .then(response => alert('Risk is updated for ' + props.robot))\n            .catch((error) => {\n                console.error('Error Message:', error);\n            });\n    };\n    return (\n        <CardWidget title={\"Risk Settings\"}>\n            <Form>\n                <Form.Group className=\"mb-3\" controlId=\"daily_risk_perc\">\n                    <Form.Label>Daily Loss Limit</Form.Label>\n                    <Form.Control onChange={(e) => setDailyRiskPerc(e.target.value)} type=\"number\" value={dailyRiskPerc}\n                                  min={0.0} max={1}\n                                  step={0.01}/>\n                </Form.Group>\n                <Form.Group className=\"mb-3\" controlId=\"daily_trade_limit\">\n                    <Form.Label>Max Number of Trades per Day</Form.Label>\n                    <Form.Control onChange={(e) => setDailyTradeLimit(e.target.value)} type=\"number\" value={dailyTradeLimit} min={0.0}/>\n                </Form.Group>\n                <Form.Group className=\"mb-3\" controlId=\"risk_per_trade\">\n                    <Form.Label>Risk Exposure per Trade</Form.Label>\n                    <Form.Control onChange={(e) => setRiskPerTrade(e.target.value)} type=\"number\" value={riskPerTrade} min={0.0} step={0.005}/>\n                </Form.Group>\n                <Form.Group className=\"mb-3\" controlId=\"quantity_type\">\n                    <Form.Label>Quantity Type</Form.Label>\n                    <Form.Control onChange={(e) => setQuantityType(e.target.value)} value={quantityType} as=\"select\">\n                        <option value={'Stop Based'}>Stop Based</option>\n                        <option value={'Fix'}>Fix</option>\n                    </Form.Control>\n                </Form.Group>\n                <Form.Group className=\"mb-3\" controlId=\"quantity\">\n                    <Form.Label>Quantity</Form.Label>\n                    <Form.Control onChange={(e) => setQuantity(e.target.value)} type=\"number\" placeholder={quantity} min={0.0}/>\n                </Form.Group>\n                <Form.Group className=\"mb-3\" controlId=\"sl\">\n                    <Form.Label>Stop Loss</Form.Label>\n                    <Form.Control onChange={(e) => setSl(e.target.value)} type=\"number\" placeholder={sl} min={0.0}/>\n                </Form.Group>\n                <Form.Group className=\"mb-3\" controlId=\"win_exp\">\n                    <Form.Label>Winning Exposure per Trade</Form.Label>\n                    <Form.Control onChange={(e) => setWinExp(e.target.value)} type=\"number\" placeholder={winExp} min={0.0}/>\n                </Form.Group>\n                <Button onClick={submitForm} variant=\"primary\" type=\"submit\">\n                    Save\n                </Button>\n            </Form>\n        </CardWidget>\n    );\n};\n\nexport default RobotRiskSettings;\n","import CardWidget from \"../../../../components/CardWidget\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport axios from \"axios\";\nimport {useState} from \"react\";\n\nconst RobotSettings = (props) => {\n    const [status, setStatus] = useState();\n    const submitForm = (event) => {\n        event.preventDefault();\n        axios.post(props.server + 'robots/update_status/', {\n            robot: props.robot,\n            status: status,\n        })\n            .then(response => alert('Risk is updated for ' + props.robot))\n            .catch((error) => {\n                console.error('Error Message:', error);\n            });\n    };\n    return (\n        <CardWidget title={'Settings'} style={{margin:'5px'}}>\n            <Form>\n                <Form.Group className=\"mb-3\" controlId=\"quantity_type\">\n                    <Form.Label>Status</Form.Label>\n                    <Form.Control onChange={(e) => setStatus(e.target.value)} defaultValue={'active'} as=\"select\">\n                        <option value={'active'}>Active</option>\n                        <option value={'inactive'}>Inactive</option>\n                    </Form.Control>\n                </Form.Group>\n                <Button onClick={submitForm} variant=\"primary\" type=\"submit\">\n                    Save\n                </Button>\n            </Form>\n        </CardWidget>\n    );\n};\n\nexport default RobotSettings","import RobotRiskSettings from \"./RobotRiskSettings\";\nimport RobotSettings from \"./RobotSettings\";\n\n// Bootstrap\nimport Container from \"react-bootstrap/Container\";\nimport Table from \"react-bootstrap/Table\";\nimport Button from \"react-bootstrap/Button\";\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport {useEffect, useState} from \"react\";\n\nconst RobotSettingsPage = (props) => {\n    return (\n        <Row style={{height: '100%', width: '100%', margin:'0px'}}>\n            <Col>\n                <RobotRiskSettings robot={props.robot} server={props.server}/>\n            </Col>\n            <Col>\n                <RobotSettings robot={props.robot} server={props.server}/>\n            </Col>\n        </Row>\n    );\n};\n\nexport default RobotSettingsPage;","import {useState, useEffect, useContext} from \"react\";\n\nimport NewRobotForm from \"./Robot/NewRobotForm\";\nimport RobotTable from \"./Robot/RobotTable\";\nimport RobotBalanceCalculation from \"./Robot/Calculations/RobotBalanceCalculation\";\n\nimport RobotCashFlow from \"./Robot/RobotCashFlow\";\nimport RobotNav from \"./Robot/RobotNav\";\n\nimport RobotProcesses from \"./Robot/RobotProcesses\";\n\n// Forms\nimport RobotPricingForm from \"./Robot/Calculations/RobotPricingForm\";\n\nimport axios from \"axios\";\n\n// Sidebar\nimport { ProSidebar, Menu, MenuItem, SubMenu } from 'react-pro-sidebar';\nimport 'react-pro-sidebar/dist/css/styles.css';\n\n// Subpages\nimport RobotDashBoardPage from \"./Robot/SubPages/RobotDashboard/RobotDashBoardPage\";\nimport RobotTransactionsPage from \"./Robot/SubPages/RobotTransactions/RobotTransactionsPage\";\nimport RobotRiskPage from \"./Robot/SubPages/RobotRisk/RobotRiskPage\";\nimport RobotReturnPage from \"./Robot/SubPages/RobotReturn/RobotReturnPage\";\nimport RobotSettingsPage from \"./Robot/SubPages/RobotSettings/RobotSettingsPage\";\n\n// Bootstrap\nimport Container from \"react-bootstrap/Container\";\nimport Table from \"react-bootstrap/Table\";\nimport Button from \"react-bootstrap/Button\";\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\n\n// Context\nimport ServerContext from \"../context/server-context\";\nimport EnvContext from \"../context/env-context\";\nimport RobotContext from \"../context/robot-context\";\nimport {Card} from \"react-bootstrap\";\nimport Form from \"react-bootstrap/Form\";\nimport {Link, Route, Switch} from \"react-router-dom\";\nimport DateContext from \"../context/date-context\";\n\n// Icons\nimport { BsFillPlusSquareFill, BsCalculator, BsCash, BsGrid3X2Gap, BsExclamationDiamond, BsBarChart, BsGear, BsCaretRight } from 'react-icons/bs';\nimport { TiCalculator, TiChartPieOutline } from \"react-icons/ti\";\n\nconst RobotPage = (props) => {\n    const server = useContext(ServerContext)['server'];\n    const env = useContext(EnvContext)['environment'];\n    const defaultRobots = useContext(RobotContext)['robots'];\n    const [robot, setRobot] = useState(defaultRobots[0]['name']);\n\n    const changeRobot = (rob) => {\n        setRobot(rob);\n    };\n\n    // New robot form\n    const [showNewRobot, setNewRobot] = useState(false);\n    const showNewRobotForm = () => {\n        setNewRobot(true);\n    };\n    const hideNewRobotForm = () => {\n        setNewRobot(false);\n    };\n\n    const [showRobotBalanceCalc, setRobotBalanceCalc] = useState(false);\n    const showRobotCalcForm = () => {\n        setRobotBalanceCalc(true);\n    };\n    const hideRobotBalanceCalcForm = () => {\n        setRobotBalanceCalc(false);\n    };\n\n    const [showRobotPricingCalc, setRobotPricingCalc] = useState(false);\n    const showRobotPricingForm = () => {\n        setRobotPricingCalc(true);\n    };\n    const hideRobotPricingCalcForm = () => {\n        setRobotPricingCalc(false);\n    };\n\n    return (\n        <Container style={{background: '#FBFAFA', width: \"100%\", height: window.innerHeight, padding: '0px'}} fluid>\n            <Row style={{height: '100%', margin:'0px'}}>\n                <ProSidebar>\n                    <Menu iconShape=\"square\">\n                        <SubMenu title=\"Robot\" icon={<BsCaretRight size={20} className=\"rounded-circle\"/>}>\n                            <MenuItem style={{padding: '5px'}}><RobotNav robots={defaultRobots}\n                                                                         server={server}\n                                                                         env={env}\n                                                                         robotChange={changeRobot}\n                            />\n                            </MenuItem>\n                        </SubMenu>\n                        <MenuItem onClick={showNewRobotForm}\n                                  icon={<BsFillPlusSquareFill size={20} className=\"rounded-circle\"/>}>New\n                            Robot</MenuItem>\n                        <MenuItem icon={<TiChartPieOutline size={20}/>}>Dashboard\n                            <Link to=\"/robot/dashboard\"/>\n                        </MenuItem>\n                        <SubMenu title=\"Trade\" icon={<BsCash size={20}/>}>\n                            <MenuItem>Robot</MenuItem>\n                        </SubMenu>\n                        <SubMenu title=\"Calculations\" icon={<BsCalculator size={20} className=\"rounded-circle\"/>}>\n                            <MenuItem onClick={showRobotCalcForm}>Balance</MenuItem>\n                            <MenuItem onClick={showRobotPricingForm}>Pricing</MenuItem>\n                        </SubMenu>\n                        <MenuItem icon={<BsGrid3X2Gap size={20} className=\"rounded-circle\"/>}>Transactions\n                            <Link to=\"/robot/transactions\"/>\n                        </MenuItem>\n                        <MenuItem icon={<BsExclamationDiamond size={20}/>}>Risk\n                            <Link to=\"/robot/risk\"/>\n                        </MenuItem>\n                        <MenuItem icon={<BsBarChart size={20}/>}>Return\n                            <Link to=\"/robot/return\"/>\n                        </MenuItem>\n                        <MenuItem icon={<BsGear size={20}/>}>Settings\n                            <Link to=\"/robot/settings\"/>\n                        </MenuItem>\n                    </Menu>\n                </ProSidebar>\n                <Col style={{width: '50%'}}>\n                    <Row style={{padding:'15px', height:window.innerHeight, width:'100%', margin:'0px'}}>\n                        <Switch>\n                            <Route path=\"/robot/dashboard\">\n                                <RobotDashBoardPage server={server} robot={robot} default={defaultRobots[0]}/>\n                            </Route>\n                            <Route path=\"/robot/transactions\">\n                                <RobotTransactionsPage robot={robot} server={server}/>\n                            </Route>\n                            <Route path=\"/robot/risk\">\n                                <RobotRiskPage robot={robot} server={server}/>\n                            </Route>\n                            <Route path=\"/robot/return\">\n                                <RobotReturnPage robot={robot} server={server}/>\n                            </Route>\n                            <Route path=\"/robot/settings\">\n                                <RobotSettingsPage robot={robot} server={server}/>\n                            </Route>\n                        </Switch>\n                    </Row>\n                </Col>\n            </Row>\n            {/*<Row style={{height:'500px', padding:'5px'}}>*/}\n            {/*    <Col >*/}\n            {/*        <Row style={{height:'100%'}}>*/}\n            {/*            <Col style={{height: '100%'}}>*/}\n            {/*                <RobotProcesses robot={robot} start_date={startDate} end_date={endDate} server={server}/>*/}\n            {/*            </Col>*/}\n            {/*        </Row>*/}\n            {/*    </Col>*/}\n            {/*</Row>*/}\n            {/*<Row style={{height:'500px', padding:'5px'}}>*/}\n            {/*    <Col>*/}\n            {/*        <Card>*/}\n            {/*            <RobotTable server={server} env={env}/>*/}\n            {/*        </Card>*/}\n            {/*    </Col>*/}\n            {/*</Row>*/}\n            <NewRobotForm show={showNewRobot} hide={hideNewRobotForm} server={server} style={{height: '400px'}}/>\n            <RobotBalanceCalculation show={showRobotBalanceCalc} hide={hideRobotBalanceCalcForm} server={server}\n                                     robot={robot}/>\n            <RobotPricingForm show={showRobotPricingCalc} hide={hideRobotPricingCalcForm} server={server} robot={robot}/>\n        </Container>\n    );\n};\n\nexport default RobotPage;","import PriceParagraph from \"./TradePage/PriceParagraph\";\n\nconst InstrumentPage = () => {\n    // const newWebSocket = new WebSocket('ws://127.0.0.1:8000/trade/price_stream/')\n\n    return (\n        <div>\n            {/*<PriceParagraph socketConnection={newWebSocket}/>*/}\n            <h2>Instrument Page</h2>\n        </div>\n    );\n};\n\nexport default InstrumentPage;","import './App.css';\nimport {useContext, useEffect, useState} from \"react\";\nimport {Route, Switch} from \"react-router-dom\";\nimport RiskPage from \"./Pages/RiskPage\";\nimport HomePage from \"./Pages/HomePage\";\nimport PortfolioPage from \"./Pages/PortfolioPage\";\nimport TradePage from \"./Pages/TradePage\";\nimport Navigation from \"./components/NavBar\";\nimport RobotPage from \"./Pages/RobotPage\";\nimport InstrumentPage from \"./Pages/InstrumentPage\";\n\n// Contexts\nimport ServerContext from \"./context/server-context\";\nimport EnvContext from \"./context/env-context\";\nimport PortfolioContext from \"./context/portfolio-context\";\nimport RobotContext from \"./context/robot-context\";\nimport DateContext from \"./context/date-context\";\n\nimport axios from \"axios\";\nimport Button from \"react-bootstrap/Button\";\n\nimport ReactNotification from 'react-notifications-component';\nimport 'react-notifications-component/dist/theme.css';\n\n\nfunction App() {\n    // 'http://127.0.0.1:8000/' 'https://pavliati.pythonanywhere.com/'\n    const [robotEnvData, setRobotEnvData] = useState('live');\n    const [portfolioData, setPortfolioData] = useState([]);\n    const [robotsData, setRobotsData] = useState([]);\n    const server = 'https://pavliati.pythonanywhere.com/'\n\n    const getEnvData = (env) => {\n        setRobotEnvData(env);\n    };\n    // Date variables\n    const date = new Date();\n    const firstDay = new Date(date.getFullYear(), date.getMonth(), 2);\n    const [startDate, setStartDate] = useState(firstDay.toISOString().substr(0,10));\n    const [endDate, setEndDate] = useState(date.toISOString().substr(0,10));\n    console.log(firstDay.toISOString())\n    useEffect(() => {\n            axios.get(server + 'portfolios/get_portfolio_data/all')\n                .then(response => setPortfolioData(response['data']))\n                .catch((error) => {\n                    console.error('Error Message:', error);\n                });\n        }, []\n    );\n\n    useEffect(() => {\n            axios.get(server + 'robots/get_robots/' + robotEnvData)\n                .then(response => setRobotsData(response['data']))\n                .catch((error) => {\n                    console.error('Error Message:', error);\n                });\n        }, []\n    );\n    return (\n        <ServerContext.Provider value={{server: server}}>\n            <EnvContext.Provider value={{environment: robotEnvData}}>\n                <RobotContext.Provider value={{robots: robotsData}}>\n                    <PortfolioContext.Provider value={{portfolioData}}>\n                        <DateContext.Provider value={{\n                            startDate: startDate,\n                            endDate: endDate,\n                            saveStartDate: setStartDate,\n                            saveEndDate: setEndDate,\n                        }}>\n                            <ReactNotification/>\n                            <div className=\"App\">\n                                <Navigation onEnvChange={getEnvData} env={robotEnvData}/>\n                                <Switch>\n                                    <Route path=\"/risk\">\n                                        <RiskPage/>\n                                    </Route>\n                                    <Route path=\"/home\">\n                                        <HomePage/>\n                                    </Route>\n                                    <Route path=\"/trade\">\n                                        <TradePage/>\n                                    </Route>\n                                    <Route path=\"/portfolio\">\n                                        <PortfolioPage/>\n                                    </Route>\n                                    <Route path=\"/instruments\">\n                                        <InstrumentPage/>\n                                    </Route>\n                                    <Route path=\"/robot\">\n                                        <RobotPage/>\n                                    </Route>\n                                </Switch>\n                            </div>\n                        </DateContext.Provider>\n                    </PortfolioContext.Provider>\n                </RobotContext.Provider>\n            </EnvContext.Provider>\n        </ServerContext.Provider>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <BrowserRouter>\n            <App/>\n        </BrowserRouter>\n    </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}